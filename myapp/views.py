
from django.shortcuts import render, redirect,get_object_or_404
from django.contrib.auth.models import User
from django.contrib import messages
from .models import Course,VideoCourse
from .models import CourseDetails
from django.http import HttpResponse
from .models import Banner
from .models import Staff
from .models import CourseOrder
from .models import VideoLesson  
from .models import UserProfile 
from django.contrib.auth import authenticate, login
from rest_framework.response import Response
from rest_framework import status
from django.contrib.auth.hashers import make_password
from django.contrib.auth.decorators import login_required
from django.shortcuts import render
from django.contrib.auth import logout
from rest_framework.decorators import api_view , permission_classes
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework.permissions import IsAuthenticated
from django.http import HttpResponseBadRequest, HttpResponseRedirect
from django.urls import reverse
from .decorators import admin_required  , instructor_required  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Decorator
from django.contrib.auth.models import User, Group  # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Group
from rest_framework.permissions import AllowAny, IsAdminUser
from django.core.exceptions import ObjectDoesNotExist
from django.http import JsonResponse
from .models import InstructorProfile
from django.db.models import Q
from django.http import JsonResponse
import json
from django.core.files.storage import FileSystemStorage
from .models import CourseBooking
from django.db.models import Count
from django.core.paginator import Paginator
from .serializers import CourseDetailsSerializer, AddCourseSerializer ,BannerSerializer,VideoCourseOrderSerializer 
from myapp.serializers import CourseBookingSerializer
from django.contrib import messages
from django.core.mail import send_mail
from django.conf import settings
import random
import string
import datetime
from django.utils.timezone import now
import re
from .serializers import BookingDetailSerializer, CourseSerializer,BookingHistorySerializer,InstructorProfileSerializer
from django.contrib.auth import update_session_auth_hash
from django.core.files.base import ContentFile
import base64
from django.core.exceptions import ValidationError
from rest_framework.status import HTTP_201_CREATED, HTTP_400_BAD_REQUEST
from django.contrib.auth.hashers import make_password
from myapp.models import InstructorProfile  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ import ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
# ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà (‡πÉ‡∏ä‡πâ urllib.parse ‡πÅ‡∏ó‡∏ô)
from urllib.parse import quote 
from urllib.parse import quote
from django.db.models import Sum
from django.utils.timezone import now
from datetime import datetime, timedelta
import plotly.graph_objs as go
import plotly.offline as opy
from django.shortcuts import render
from django.db.models import Sum, Count
from datetime import datetime
from .models import CourseBooking, CourseOrder, Course,VideoCourseDetails,VideoCourseOrder
from datetime import timedelta  # ‚úÖ Import timedelta ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
from django.db.models.signals import post_save
from django.dispatch import receiver
#---------------------------------------------------------------------------------
import requests
from django.shortcuts import render
from django.http import HttpResponseForbidden
from .utils import grant_access_to_user  # ‡∏ñ‡πâ‡∏≤ grant_access_to_user ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå utils.py
from django.core.files.storage import default_storage
from rest_framework.parsers import MultiPartParser, FormParser
from rest_framework.decorators import api_view, permission_classes, parser_classes

# ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å Google Cloud
YOUTUBE_API_KEY = "AIzaSyBv1lfL1TwK2JyJqD_w1q1OwPtXWbZzal8"  # üî¥ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

def youtube_video_details(request):
    video_data = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    error_message = None  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

    if request.method == "POST":
        video_id = request.POST.get("video_id")  # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Video ID ‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        if video_id:
            url = f"https://www.googleapis.com/youtube/v3/videos?id={video_id}&key={YOUTUBE_API_KEY}&part=snippet,statistics"
            response = requests.get(url)
            data = response.json()

            if "items" in data and len(data["items"]) > 0:
                video_data = data["items"][0]  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            else:
                error_message = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Video ID ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

    return render(request, "youtube_video.html", {"video_data": video_data, "error_message": error_message})

#------------------------------------------------FORviDeo--------------------------------

import os
from django.shortcuts import render
from django.contrib.auth.decorators import login_required
from django.http import JsonResponse
from .models import VideoLesson
from .utils import upload_video_to_drive  # ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ Google Drive
from decimal import Decimal  # ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á import ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ


@api_view(["POST"])
@permission_classes([IsAuthenticated])
def add_video_course_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    """
    title = request.data.get("title")
    description = request.data.get("description")
    price = request.data.get("price")
    instructor_name = request.data.get("instructor") 
    image = request.FILES.get("image")

    if not title or not description or not price or not image or not instructor_name:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

    course = VideoCourse.objects.create(
        title=title,
        description=description,
        price=price,
        image=image,
        instructor=instructor_name,
        added_by=request.user, 
        status="pending"
    )

    return Response({
        "message": "‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ï‡πà‡∏≠‡πÑ‡∏õ",
        "course_id": course.id,
        "next_step": reverse('add_video_course_details_api', kwargs={'course_id': course.id})
    }, status=201)


@api_view(["POST"])
@permission_classes([IsAuthenticated])
def add_video_course_details_api(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    """
    course = get_object_or_404(VideoCourse, id=course_id)

    name = request.data.get("name")
    description = request.data.get("description")
    additional_description = request.data.get("additional_description", "")
    image = request.FILES.get("image")
    additional_image = request.FILES.get("additional_image")
    preview_video = request.FILES.get("preview_video")

    if not name or not description or not image:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô `VideoCourseDetails`
    VideoCourseDetails.objects.create(
        course=course,
        name=name,
        description=description,
        additional_description=additional_description,
        image=image,
        additional_image=additional_image,
        preview_video=preview_video
    )

    return Response({
        "message": "‚úÖ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
        "course_id": course.id,
        "next_step": reverse('add_video_lesson_api', kwargs={'course_id': course.id})
    }, status=201)


@api_view(["POST"])
@permission_classes([IsAuthenticated])
def add_video_lesson_api(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    """
    course = get_object_or_404(VideoCourse, id=course_id)

    title = request.data.get("title")
    description = request.data.get("description")
    duration = request.data.get("duration")
    video_file = request.FILES.get("video_file")
    document = request.FILES.get("document")

    if not title or not description or not duration or not video_file:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    temp_file_path = os.path.join("media", video_file.name)
    with open(temp_file_path, "wb+") as destination:
        for chunk in video_file.chunks():
            destination.write(chunk)
    destination.close()

    # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Google Drive
    google_drive_id = upload_video_to_drive(temp_file_path, video_file.name, request.user.email)

    # ‚úÖ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
    try:
        os.remove(temp_file_path)
    except PermissionError:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: {temp_file_path}")

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ DB
    VideoLesson.objects.create(
        course=course,
        title=title,
        description=description,
        google_drive_id=google_drive_id,
        duration=duration,
        instructor=request.user,
        document=document
    )

    return Response({
        "message": "‚úÖ ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö",
        "course_id": course.id,
        "status": "pending"
    }, status=201)

@login_required
def add_video_lesson(request, course_id):
    course = get_object_or_404(VideoCourse, id=course_id)

    if request.method == "POST":
        title = request.POST.get("title")
        description = request.POST.get("description")
        duration = request.POST.get("duration")
        video_file = request.FILES.get("video_file")
        document = request.FILES.get("document")  

        if not title or not description or not duration or not video_file:
            return JsonResponse({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        temp_file_path = os.path.join("media", video_file.name)
        with open(temp_file_path, "wb+") as destination:
            for chunk in video_file.chunks():
                destination.write(chunk)
        destination.close()

        # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Google Drive
        google_drive_id = upload_video_to_drive(temp_file_path, video_file.name, request.user.email)

        # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        try:
            os.remove(temp_file_path)
        except PermissionError:
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: {temp_file_path}")

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ DB
        VideoLesson.objects.create(
            course=course,
            title=title,
            description=description,
            google_drive_id=google_drive_id,
            duration=duration,
            instructor=request.user,
            document=document 
        )
        print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á...")
        return redirect('instructor_live_courses')
  # ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™

    return render(request, "instructor/add_video_lesson.html", {"course": course})


@login_required
def add_video_course(request):
    if request.method == "POST":
        title = request.POST.get("title")
        description = request.POST.get("description")
        price = request.POST.get("price")
        instructor_name = request.POST.get("instructor")  # ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        image = request.FILES.get("image")

        if not title or not description or not price or not image or not instructor_name:
            return JsonResponse({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

        course = VideoCourse.objects.create(
            title=title,
            description=description,
            price=price,
            image=image,
            instructor=instructor_name,
            added_by=request.user,  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô
            status="pending"
        )

        return redirect(reverse('add_video_course_details', kwargs={'course_id': course.id}))
    
    return render(request, "instructor/add_video_course.html")



def video_courses(request):
    courses = VideoCourse.objects.filter(added_by=request.user)# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    return render(request, "instructor/video_courses.html", {"courses": courses})

@api_view(["GET"])
@permission_classes([IsAuthenticated])
def video_courses_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    """
    try:
        courses = VideoCourse.objects.all()

        course_data = [
            {
                "id": course.id,
                "title": course.title,
                "description": course.description,
                "price": float(course.price),  # ‡πÅ‡∏õ‡∏•‡∏á Decimal ‡πÄ‡∏õ‡πá‡∏ô float
                "image_url": request.build_absolute_uri(course.image.url) if course.image else None,
                "instructor": course.instructor,
                "status": course.status,
                "revision_message": course.revision_message if course.revision_message else None,  # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                "created_at": course.created_at.strftime("%Y-%m-%d %H:%M:%S"),
                "payment_qr": request.build_absolute_uri(course.payment_qr.url) if course.payment_qr else None,
            }
            for course in courses
        ]

        return Response({"courses": course_data}, status=200)

    except Exception as e:
        return Response({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)

@login_required
def video_course_details(request, course_id):
    course = get_object_or_404(VideoCourse, id=course_id)
    lessons = VideoLesson.objects.filter(course=course)

    return render(request, "instructor/video_course_details.html", {"course": course, "lessons": lessons})

@login_required
def add_video_course_details(request, course_id):
    course = get_object_or_404(VideoCourse, id=course_id)

    if request.method == 'POST':
        name = request.POST.get('name')
        description = request.POST.get('description')
        additional_description = request.POST.get('additional_description', '')
        image = request.FILES.get('image')
        additional_image = request.FILES.get('additional_image')
        preview_video = request.FILES.get('preview_video') 

        if not name or not description or not image:
            return JsonResponse({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô `VideoCourseDetails`
        VideoCourseDetails.objects.create(
            course=course,
            name=name,
            description=description,
            additional_description=additional_description,
            image=image,
            additional_image=additional_image,
            preview_video=preview_video 
        )

        return redirect(reverse('add_video_lesson', kwargs={'course_id': course.id}))  


    return render(request, 'instructor/add_video_course_details.html', {"course": course})


def delete_selected_video_courses(request):
    if request.method == "POST":
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
            selected_courses = request.POST.getlist("selected_courses")  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ selected_courses
            if not selected_courses:
                messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
                return redirect("instructor_live_courses")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™

            # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            for course_id in selected_courses:
                course = get_object_or_404(VideoCourse, id=course_id)
                VideoCourseDetails.objects.filter(course=course).delete()  # ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™
                VideoLesson.objects.filter(course=course).delete()  # ‡∏•‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
                course.delete()  # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

            messages.success(request, "‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            return redirect("instructor_live_courses")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™

        except json.JSONDecodeError:
            messages.error(request, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return redirect("instructor_live_courses")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™

    messages.error(request, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏î‡πâ")
    return redirect("instructor_live_courses")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™# ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™

#-----------------------------------------------api-------------------------------------
@api_view(["DELETE"])
@permission_classes([IsAuthenticated])  # ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î
def delete_video_course_api(request, course_id):
    try:
        course = get_object_or_404(VideoCourse, id=course_id)

        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        VideoCourseDetails.objects.filter(course=course).delete()
        VideoLesson.objects.filter(course=course).delete()
        course.delete()

        return Response({"message": "‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_200_OK)
    
    except Exception as e:
        return Response({"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™: " + str(e)},
                        status=status.HTTP_400_BAD_REQUEST)
#-----------------------------------------------------------------------------------------------
@login_required
def edit_video_course(request, course_id):
    course = get_object_or_404(VideoCourse, id=course_id)

    if request.method == "POST":
        title = request.POST.get("title")
        description = request.POST.get("description")
        price = request.POST.get("price")
        image = request.FILES.get("image")

        if not title or not description or not price:
            return JsonResponse({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
        course.title = title
        course.description = description
        course.price = price

        # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if image:
            if course.image:
                if os.path.exists(course.image.path):
                    os.remove(course.image.path)
            course.image = image
        course.status = 'revised'
        course.save()


        messages.success(request, "‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!")

        return redirect('edit_video_course_details', course_id=course.id)  # ‚úÖ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    return render(request, "instructor/edit_video_course.html", {"course": course})

#-------------------------------------api---------------------------------------------

@api_view(['PUT'])
@permission_classes([IsAuthenticated])
def api_edit_video_course(request, course_id):
    course = get_object_or_404(VideoCourse, id=course_id, added_by=request.user)

    title = request.data.get("title")
    description = request.data.get("description")
    price = request.data.get("price")
    image = request.FILES.get("image")

    if not title or not description or not price:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

    course.title = title
    course.description = description
    course.price = price

    if image:
        if course.image and os.path.exists(course.image.path):
            os.remove(course.image.path)
        course.image = image

    course.status = 'revised'
    course.save()

    return Response({"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_video_course_api(request, course_id):
    course = get_object_or_404(VideoCourse, id=course_id, added_by=request.user)

    return Response({
        "id": course.id,
        "title": course.title,
        "description": course.description,
        "price": course.price,
        "image_url": request.build_absolute_uri(course.image.url) if course.image else None,  # ‚úÖ
        "instructor": course.instructor,
        "status": course.status,
        "created_at": course.created_at,
    })

#----------------------------------------------------------------------------------------------------

@login_required
def edit_video_course_details(request, course_id):
    course_details = get_object_or_404(VideoCourseDetails, course_id=course_id)

    if request.method == "POST":
        name = request.POST.get("name")
        description = request.POST.get("description")
        additional_description = request.POST.get("additional_description", "")
        image = request.FILES.get("image")
        additional_image = request.FILES.get("additional_image")
        preview_video = request.FILES.get("preview_video")

        if not name or not description:
            return JsonResponse({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

        # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô `VideoCourseDetails`
        course_details.name = name
        course_details.description = description
        course_details.additional_description = additional_description

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        if image:
            if course_details.image and os.path.exists(course_details.image.path):
                os.remove(course_details.image.path)
            course_details.image = image
        
        if additional_image:
            if course_details.additional_image and os.path.exists(course_details.additional_image.path):
                os.remove(course_details.additional_image.path)
            course_details.additional_image = additional_image

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        if preview_video:
            if course_details.preview_video and os.path.exists(course_details.preview_video.path):
                os.remove(course_details.preview_video.path)
            course_details.preview_video = preview_video

        course_details.course.status = 'revised'

        course_details.save()

        return redirect("edit_video_lesson", course_id=course_details.course.id)  # ‚úÖ ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ

    return render(request, "instructor/edit_video_course_details.html", {"course_details": course_details})

#-------------------------------------api---------------------------------------------

@api_view(['PUT'])
@permission_classes([IsAuthenticated])
def api_edit_video_course_details(request, course_id):
    details = get_object_or_404(VideoCourseDetails, course_id=course_id, )

    details.name = request.data.get("name", details.name)
    details.description = request.data.get("description", details.description)
    details.additional_description = request.data.get("additional_description", details.additional_description)

    if 'image' in request.FILES:
        if details.image and os.path.exists(details.image.path):
            os.remove(details.image.path)
        details.image = request.FILES['image']

    if 'additional_image' in request.FILES:
        if details.additional_image and os.path.exists(details.additional_image.path):
            os.remove(details.additional_image.path)
        details.additional_image = request.FILES['additional_image']

    if 'preview_video' in request.FILES:
        if details.preview_video and os.path.exists(details.preview_video.path):
            os.remove(details.preview_video.path)
        details.preview_video = request.FILES['preview_video']

    details.course.status = 'revised'
    details.save()

    return Response({"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})



@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_video_course_details_api(request, course_id):
    details = get_object_or_404(VideoCourseDetails, course_id=course_id, course__added_by=request.user)

    return Response({
        "id": details.id,
        "name": details.name,
        "description": details.description,
        "additional_description": details.additional_description,
        "image": details.image.url if details.image else None,
        "additional_image": details.additional_image.url if details.additional_image else None,
        "preview_video": details.preview_video.url if details.preview_video else None,
    })

#------------------------------------------------------------------------------------

@login_required
def edit_video_lesson(request, course_id):
    lesson = get_object_or_404(VideoLesson, course_id=course_id)

    if request.method == "POST":
        title = request.POST.get("title")
        description = request.POST.get("description")
        duration = request.POST.get("duration")
        document = request.FILES.get("document")
        video_file = request.FILES.get("video_file")  # ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡∏°‡πà

        if not title or not description or not duration:
            return JsonResponse({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
        lesson.title = title
        lesson.description = description
        lesson.duration = duration

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö
        if document:
            if lesson.document and os.path.exists(lesson.document.path):
                os.remove(lesson.document.path)  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            lesson.document = document  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà

        # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏´‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if video_file:
            temp_file_path = os.path.join("media", video_file.name)
            with open(temp_file_path, "wb+") as destination:
                for chunk in video_file.chunks():
                    destination.write(chunk)

            # ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ Google Drive
            google_drive_id = upload_video_to_drive(temp_file_path, video_file.name)

            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if lesson.google_drive_id:
                print(f"üìå ‡∏•‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏Å‡πà‡∏≤: {lesson.google_drive_id}")

            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà
            lesson.google_drive_id = google_drive_id

            # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            try:
                os.remove(temp_file_path)
            except PermissionError:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå: {temp_file_path}")
        lesson.course.status = 'revised'
        lesson.save()
        print("‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ video_courses...")
        return redirect("instructor_live_courses")  # ‚úÖ ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

    return render(request, "instructor/edit_video_lesson.html", {"lesson": lesson})

#-------------------------------------api---------------------------------------------

@api_view(['PUT'])
@permission_classes([IsAuthenticated])
def api_edit_video_lesson(request, course_id):
    lesson = get_object_or_404(VideoLesson, course_id=course_id,instructor=request.user)

    lesson.title = request.data.get("title", lesson.title)
    lesson.description = request.data.get("description", lesson.description)
    lesson.duration = request.data.get("duration", lesson.duration)

    if 'document' in request.FILES:
        if lesson.document and os.path.exists(lesson.document.path):
            os.remove(lesson.document.path)
        lesson.document = request.FILES['document']

    if 'video_file' in request.FILES:
        video = request.FILES['video_file']
        temp_path = os.path.join("media", video.name)
        with open(temp_path, "wb+") as destination:
            for chunk in video.chunks():
                destination.write(chunk)

        # üëá ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î Google Drive
        google_drive_id = upload_video_to_drive(temp_path, video.name)
        lesson.google_drive_id = google_drive_id

        os.remove(temp_path)

    lesson.course.status = 'revised'
    lesson.save()

    return Response({"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_video_lesson_api(request, course_id):
    print(">>> User:", request.user)
    print(">>> Course ID:", course_id)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    order = VideoCourseOrder.objects.filter(
        user=request.user,
        course__id=course_id,
        payment_status='confirmed'
    ).first()

    if not order:
        return Response({'detail': '‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Å‡πà‡∏≠‡∏ô'}, status=403)

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡∏∞‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    course = get_object_or_404(VideoCourse, id=course_id)
    lessons = VideoLesson.objects.filter(course=course, status="approved")

    lesson_data = []
    for lesson in lessons:
        video_url = None
        if lesson.google_drive_id:
            # ‚úÖ ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
            grant_access_to_user(lesson.google_drive_id, request.user.email)

            # ‚úÖ ‡πÉ‡∏ä‡πâ URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WebView ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÉ‡∏ô React Native
        video_url = f"https://drive.google.com/file/d/{lesson.google_drive_id}/preview"

        lesson_data.append({
            "id": lesson.id,
            "title": lesson.title,
            "description": lesson.description,
            "duration": lesson.duration,
            "document": request.build_absolute_uri(lesson.document.url) if lesson.document else None,
            "video_url": video_url,
            "status": lesson.status,
        })

    return Response({
        "course": {
            "title": course.title,
            "description": course.description,
            "image": request.build_absolute_uri(course.image.url) if course.image else None,
        },
        "lessons": lesson_data
    })

#------------------------------------------------------------------------------------


def review_video_courses(request):
    """ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ‡πÅ‡∏•‡∏∞ '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' """
    courses = VideoCourse.objects.filter(status__in=['pending', 'revised'])
    return render(request, 'admin/review_video_courses.html', {'courses': courses})


def approve_video_course(request, course_id):
    """ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ """
    course = get_object_or_404(VideoCourse, id=course_id)
    course.status = 'approved'
    course.save()

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï VideoLesson ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    video_lessons = VideoLesson.objects.filter(course=course, status='pending')
    video_lessons.update(status='approved')  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô approved

    messages.success(request, "‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞ VideoLessons ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢!")
    return redirect('review_video_courses')

@receiver(post_save, sender=VideoCourse)
def approve_video_lessons(sender, instance, created, **kwargs):
    """ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥, ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ VideoLesson ‡∏î‡πâ‡∏ß‡∏¢ """
    if instance.status == 'approved':
        # ‡∏î‡∏∂‡∏á VideoLesson ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö VideoCourse ‡∏ô‡∏µ‡πâ
        video_lessons = VideoLesson.objects.filter(course=instance, status='pending')
        video_lessons.update(status='approved')  # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô approved

def send_back_video_course(request, course_id):
    """ ‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç """
    if request.method == 'POST':
        revision_message = request.POST.get('revision_message')
        course = get_object_or_404(VideoCourse, id=course_id)
        course.status = 'revision'
        course.revision_message = revision_message
        course.save()
        messages.warning(request, "‚ö†Ô∏è ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect('review_video_courses')

    return HttpResponseRedirect(reverse('review_video_courses'))

def upload_video_course_qr(request, course_id):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ """
    course = get_object_or_404(VideoCourse, id=course_id)

    if request.method == "POST" and 'payment_qr' in request.FILES:
        course.payment_qr = request.FILES['payment_qr']
        course.save()
        messages.success(request, "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect('review_video_courses')

    messages.error(request, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå QR Code")
    return redirect('review_video_courses')
#-------------------------------------------------------------api-------------------------------------------------------------------

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def review_video_courses_api(request):
    """ API ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ‡πÅ‡∏•‡∏∞ '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö' """
    courses = VideoCourse.objects.filter(status__in=['pending', 'revised'])
    course_data = [
        {
            "id": course.id,
            "title": course.title,
            "description": course.description,
            "price": course.price,
            "instructor": course.instructor,
            "status": course.status,
            "revision_message": course.revision_message,
            "created_at": course.created_at,
            "image_url": request.build_absolute_uri(course.image.url) if course.image else None  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°

        }
        for course in courses
    ]
    return Response({"courses": course_data})

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def approve_video_course_api(request, course_id):
    """ API ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ """
    course = get_object_or_404(VideoCourse, id=course_id)
    course.status = 'approved'
    course.save()

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï VideoLesson ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    VideoLesson.objects.filter(course=course, status='pending').update(status='approved')

    return Response({"message": "‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞ VideoLessons ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢!"})

@receiver(post_save, sender=VideoCourse)
def approve_video_lessons(sender, instance, created, **kwargs):
    """ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥, ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ VideoLesson ‡∏î‡πâ‡∏ß‡∏¢ """
    if instance.status == 'approved':
        VideoLesson.objects.filter(course=instance, status='pending').update(status='approved')

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def send_back_video_course_api(request, course_id):
    """ API ‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç """
    revision_message = request.data.get('revision_message', '')
    course = get_object_or_404(VideoCourse, id=course_id)
    course.status = 'revision'
    course.revision_message = revision_message
    course.save()
    return Response({"message": "‚ö†Ô∏è ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß!"})

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def upload_video_course_qr_api(request, course_id):
    """ API ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ """
    course = get_object_or_404(VideoCourse, id=course_id)
    if 'payment_qr' in request.FILES:
        course.payment_qr = request.FILES['payment_qr']
        course.save()
        return Response({"message": "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"})
    return Response({"error": "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå QR Code"}, status=400)
#-------------------------------------------------------------------------------------------------------------------------

def video_course_details_user(request, course_id):
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ """
    course = get_object_or_404(VideoCourse, id=course_id)
    course_details = get_object_or_404(VideoCourseDetails, course_id=course_id)

    return render(request, 'video_course_details_user.html', {
        'course': course,
        'course_details': course_details
    })

@login_required
def purchase_video_course(request, course_id):
    course = get_object_or_404(VideoCourse, id=course_id)

    if request.method == "POST":
        payment_slip = request.FILES.get("payment_slip")
        if not payment_slip:
            messages.error(request, "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô")
            return redirect("purchase_video_course", course_id=course_id)

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        VideoCourseOrder.objects.create(
            user=request.user,
            course=course,
            payment_slip=payment_slip,
            payment_status="pending"  # ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        )

        messages.success(request, "‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
        return redirect("my_courses")  # ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô

    return render(request, "purchase_video_course.html", {"course": course})


@api_view(["GET", "POST"])
@permission_classes([IsAuthenticated])
def purchase_video_course_api(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á QR Code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    """
    course = get_object_or_404(VideoCourse, id=course_id)

    # ‚úÖ ‡∏î‡∏∂‡∏á QR Code URL ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤ API
    qr_code_url = request.build_absolute_uri(course.payment_qr.url) if course.payment_qr else None

    if request.method == "GET":
        # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™ + QR Code ‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡πà‡∏≠‡∏ô
        return Response(
            {
                "course_id": course.id,
                "title": course.title,
                "description": course.description,
                "price": course.price,
                "image_url": request.build_absolute_uri(course.image.url) if course.image else None,
                "qr_code_url": qr_code_url,
            },
            status=status.HTTP_200_OK,
        )

    if request.method == "POST":
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        existing_order = VideoCourseOrder.objects.filter(user=request.user, course=course).first()
        if existing_order:
            return Response({"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"}, status=status.HTTP_400_BAD_REQUEST)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if "payment_slip" not in request.FILES:
            return Response({"error": "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"}, status=status.HTTP_400_BAD_REQUEST)

        payment_slip = request.FILES["payment_slip"]

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        file_path = f"payment_slips/{payment_slip.name}"
        saved_path = default_storage.save(file_path, ContentFile(payment_slip.read()))

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
        order = VideoCourseOrder.objects.create(
            user=request.user,
            course=course,
            payment_slip=saved_path,  # ‡πÄ‡∏Å‡πá‡∏ö path ‡∏Ç‡∏≠‡∏á‡∏™‡∏•‡∏¥‡∏õ
            payment_status="pending",  # ‡∏£‡∏≠‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        )

        return Response(
            {
                "message": "‚úÖ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô",
                "order_id": order.id,
                "payment_slip_url": request.build_absolute_uri(default_storage.url(saved_path)),
                "qr_code_url": qr_code_url,  # ‚úÖ ‡∏™‡πà‡∏á QR Code ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢
            },
            status=status.HTTP_201_CREATED,
        )

def video_order_detail(request, order_id):
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ """
    course = get_object_or_404(VideoCourse, id=order_id)
    orders = VideoCourseOrder.objects.filter(course=course)

    return render(request, "admin/video_order_detail.html", {
        "course": course,  # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á template
        "orders": orders,  # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á template
    })

def confirm_video_order(request, order_id):
    """ ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô """
    order = get_object_or_404(VideoCourseOrder, id=order_id)
    order.payment_status = 'confirmed'
    order.save()
    messages.success(request, "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
    return redirect('video_order_detail', order.course.id)

def reject_video_order(request, order_id):
    """ ‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô """
    order = get_object_or_404(VideoCourseOrder, id=order_id)
    order.payment_status = 'rejected'
    order.save()
    messages.error(request, "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
    return redirect('video_order_detail', order.course.id)
#----------------------------------------------------api---------------------------------------------------------------------------------


@api_view(["GET"])
@permission_classes([IsAuthenticated])
def video_order_detail_api(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    """
    course = get_object_or_404(VideoCourse, id=course_id)
    orders = VideoCourseOrder.objects.filter(course=course)

    # ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ JSON
    orders_data = [
        {
            "order_id": order.id,
            "user": order.user.username,  # ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠
            "email": order.user.email,  # ‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠
            "payment_status": order.payment_status,  # ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
            "payment_date": order.payment_date.strftime("%Y-%m-%d %H:%M:%S") if order.payment_date else None,
            "price": float(order.course.price) if order.course.price else 0.0,
            "course_title": order.course.title,
            "course_image": request.build_absolute_uri(order.course.image.url) if order.course.image else None,
            "payment_slip": request.build_absolute_uri(order.payment_slip.url) if order.payment_slip else None
        }
        for order in orders
    ]

    return Response({
        "course_id": course.id,
        "course_title": course.title,
        "course_image": request.build_absolute_uri(course.image.url) if course.image else None,
        "orders": orders_data,
        
    }, status=200)


@api_view(["POST"])
@permission_classes([IsAuthenticated])
def confirm_video_order_api(request, order_id):
    """
    ‚úÖ API ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    """
    order = get_object_or_404(VideoCourseOrder, id=order_id)
    order.payment_status = 'confirmed'
    order.save()
    
    return Response({
        "message": "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!",
        "order_id": order.id,
        "status": order.payment_status
    }, status=200)


@api_view(["POST"])
@permission_classes([IsAuthenticated])
def reject_video_order_api(request, order_id):
    """
    ‚ùå API ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    """
    order = get_object_or_404(VideoCourseOrder, id=order_id)
    order.payment_status = 'rejected'
    order.save()
    
    return Response({
        "message": "‚ùå ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß!",
        "order_id": order.id,
        "status": order.payment_status
    }, status=200)

#----------------------------------------------------------------------------------------------------------------------------------------
@login_required
def video_lesson_view(request, course_id):
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    course = get_object_or_404(VideoCourse, id=course_id)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    order = VideoCourseOrder.objects.filter(user=request.user, course=course, payment_status='confirmed').first()
    
    if not order:
        return HttpResponseForbidden("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÑ‡∏î‡πâ")

    # ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ
    lessons = VideoLesson.objects.filter(course=course)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô Google Drive (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå)
    for lesson in lessons:
        if lesson.google_drive_id:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Google Drive
            grant_access_to_user(lesson.google_drive_id, request.user.email)
    
    return render(request, 'video_lesson_view.html', {
        'course': course,
        'lessons': lessons
    })

@api_view(['GET'])
@permission_classes([IsAuthenticated]) 
def get_video_lessons(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    """
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    course = get_object_or_404(VideoCourse, id=course_id)

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    order = VideoCourseOrder.objects.filter(user=request.user, course=course, payment_status='confirmed').first()
    if not order:
        return HttpResponseForbidden("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏π‡πÑ‡∏î‡πâ")

    # ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    lessons = VideoLesson.objects.filter(course=course, status="approved")

    lesson_data = []
    for lesson in lessons:
        video_url = None
        if lesson.google_drive_id:
            # ‚úÖ ‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå
            grant_access_to_user(lesson.google_drive_id, request.user.email)

            # ‚úÖ ‡πÉ‡∏ä‡πâ URL ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô React Native (WebView)
            video_url = f"https://drive.google.com/uc?id={lesson.google_drive_id}&export=download"

        lesson_data.append({
            "id": lesson.id,
            "title": lesson.title,
            "description": lesson.description,
            "video_url": video_url,
            "duration": lesson.duration,
            "document": lesson.document.url if lesson.document else None,  
        })

    return JsonResponse({
        "course": {
            "id": course.id,
            "title": course.title,
            "description": course.description,
            "price": course.price,
            "image": course.image.url if course.image else None,
            "instructor": course.instructor,
        },
        "lessons": lesson_data
    })
@login_required
def video_order_detail_instructor(request, course_id):
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    course = get_object_or_404(VideoCourse, id=course_id)
    
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ
    orders = VideoCourseOrder.objects.filter(course=course)
    
    return render(request, 'instructor/video_order_detail_instructor.html', {
        'course': course,
        'orders': orders,
    })

@api_view(["GET"])
@permission_classes([IsAuthenticated])
def video_order_detail_instructor_api(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Instructor
    """
    try:
        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà Instructor ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π
        course = get_object_or_404(VideoCourse, id=course_id)

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ
        orders = VideoCourseOrder.objects.filter(course=course).select_related("user")

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        data = {
            "course_id": course.id,
            "course_title": course.title,
            "total_orders": orders.count(),
            "orders": [
                {
                    "order_id": order.id,
                    "buyer_name": order.user.get_full_name() if order.user.get_full_name() else order.user.username,
                    "email": order.user.email,
                    "payment_status": order.payment_status,
                    "payment_slip": request.build_absolute_uri(order.payment_slip.url) if order.payment_slip else None,
                    "transaction_id": order.transaction_id,
                    "payment_date": order.payment_date.strftime("%Y-%m-%d %H:%M:%S"),
                }
                for order in orders
            ]
        }

        return Response(data, status=200)

    except Exception as e:
        return Response({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)
#--------------------------------------------------------------------------------
def register(request):
    if request.method == 'POST':    
        username = request.POST['username']
        first_name = request.POST['first_name']
        last_name = request.POST['last_name']
        email = request.POST['email']
        password = request.POST['password']
        password2 = request.POST['password2']
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
        if len(password) < 8:
            messages.error(request, '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£')
        elif password != password2:
            messages.error(request, '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô')
        else:
            if User.objects.filter(username=username).exists():
                messages.error(request, '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß')
            elif User.objects.filter(email=email).exists():
                messages.error(request, '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß')
            else:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
                user = User.objects.create(
                    username=username,
                    first_name=first_name,
                    last_name=last_name,
                    email=email,
                    password=make_password(password)
                )
                user.save()


                try:
                    member_group = Group.objects.get(name='Member')  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Group ‡∏ä‡∏∑‡πà‡∏≠ 'Member'
                    user.groups.add(member_group)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ Group
                except Group.DoesNotExist:
                    messages.warning(request, 'Group "Member" ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')

                messages.success(request, "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                return redirect("register") 
            

    return render(request, 'register.html')



def login_view(request):
    if request.method == 'POST':
        email = request.POST.get('email')
        password = request.POST.get('password')

        try:
            user = User.objects.get(email=email)
            user = authenticate(request, username=user.username, password=password)

            if user:
                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                profile, created = UserProfile.objects.get_or_create(user=user, defaults={
                    "first_name": user.first_name,
                    "last_name": user.last_name,
                    "email": user.email,
                })

                login(request, user)

                # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏´‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                if user.groups.filter(name='Instructor').exists():
                    return redirect('instructor_sales')
                elif user.groups.filter(name='Admin').exists():
                    return redirect('admin_dashboard')
                elif user.groups.filter(name='Member').exists():
                    return redirect('home')
                else:
                    messages.error(request, '‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
            else:
                messages.error(request, '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
        except User.DoesNotExist:
            messages.error(request, '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö')

    return render(request, 'login.html')

def staff_list_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    domain = request.build_absolute_uri('/').strip('/')
    staffs = Staff.objects.all()

    staff_data = [
        {
            "id": staff.id,
            "name": staff.name,
            "subject": staff.subject,
            "image_url": f"{domain}{staff.image.url}" if staff.image else None,
        }
        for staff in staffs
    ]

    return JsonResponse(staff_data, safe=False)

@api_view(['GET'])
@permission_classes([IsAuthenticated])  # ‚úÖ API ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
def instructor_list_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Mobile)
    """
    instructors = InstructorProfile.objects.select_related('user').all()
    
    instructor_data = [
        {
            "id": instructor.id,
            "full_name": f"{instructor.user.first_name} {instructor.user.last_name}",
            "age": instructor.age,
            "subject": instructor.subject,
            "profile_picture": request.build_absolute_uri(instructor.profile_picture.url) if instructor.profile_picture else None,
        }
        for instructor in instructors
    ]
    
    return JsonResponse(instructor_data, safe=False)



#-----------------------------------------------------------------‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ------------------------------------------------------------------------------------------------------------------------------------------------------------------

#---------------------------------------------api ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å --------------------------------------------------------

#‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Ç‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á mobile ‡πÄ‡πÄ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_user_data(request):
    user = request.user
    return Response({
        'username': user.username,
        'email': user.email,
    })



@api_view(['POST'])
@permission_classes([AllowAny])  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡πÑ‡∏î‡πâ
def register_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤ Group ‡∏Ç‡∏≠‡∏á Django Admin
    """
    username = request.data.get('username')
    first_name = request.data.get('first_name')
    last_name = request.data.get('last_name')
    email = request.data.get('email')
    password = request.data.get('password')
    password2 = request.data.get('password2')

    if not username or not email or not password:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=status.HTTP_400_BAD_REQUEST)

    if password != password2:
        return Response({"error": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"}, status=status.HTTP_400_BAD_REQUEST)

    if User.objects.filter(username=username).exists():
        return Response({"error": "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}, status=status.HTTP_400_BAD_REQUEST)

    if User.objects.filter(email=email).exists():
        return Response({"error": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"}, status=status.HTTP_400_BAD_REQUEST)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    user = User.objects.create(
        username=username,
        first_name=first_name,
        last_name=last_name,
        email=email,
        password=make_password(password)
    )
    user.save()

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ Group 'Member' ‡πÇ‡∏î‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    try:
        member_group = Group.objects.get(name='Member')  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Group 'Member'
        user.groups.add(member_group)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ Group
    except ObjectDoesNotExist:
        pass  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Group ‡∏Å‡πá‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ

    return Response({"message": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"}, status=status.HTTP_201_CREATED)


@api_view(['POST'])
@permission_classes([AllowAny])  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡πÑ‡∏î‡πâ
def login_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö JWT Token
    """
    email = request.data.get('email')
    password = request.data.get('password')

    if not email or not password:
        return Response({'error': '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô'}, status=status.HTTP_400_BAD_REQUEST)

    try:
        # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ email
        user = User.objects.get(email=email)
        user = authenticate(username=user.username, password=password)

        if user:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT Token
            refresh = RefreshToken.for_user(user)
            access_token = str(refresh.access_token)

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å Django Groups
            user_group = "Member"  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

            if user.groups.filter(name='Instructor').exists():
                user_group = "Instructor"
            elif user.groups.filter(name='Admin').exists():
                user_group = "Admin"

            return Response({
                'access': access_token,
                'refresh': str(refresh),
                'group': user_group,
                'message': '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
            }, status=status.HTTP_200_OK)
        else:
            return Response({'error': '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'}, status=status.HTTP_401_UNAUTHORIZED)

    except User.DoesNotExist:
        return Response({'error': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'}, status=status.HTTP_404_NOT_FOUND)
    



@api_view(['GET'])
@permission_classes([AllowAny])
def get_video_course_details(request, course_id):
    """ API ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ """
    try:
        course = get_object_or_404(VideoCourse, id=course_id)
        course_details = get_object_or_404(VideoCourseDetails, course=course)

        data = {
            "id": course.id,
            "title": course.title,
            "price": course.price,
            "image_url": request.build_absolute_uri(course.image.url) if course.image else None,
            "instructor": course.instructor,
            "description": course_details.description,
            "additional_description": course_details.additional_description,
            "preview_video_url": request.build_absolute_uri(course_details.preview_video.url) if course_details.preview_video else None,
            "image_left_url": request.build_absolute_uri(course_details.image.url) if course_details.image else None,
            "image_right_url": request.build_absolute_uri(course_details.additional_image.url) if course_details.additional_image else None,
        }

        return Response(data, status=200)

    except Exception as e:
        return Response({'error': str(e)}, status=400)


@api_view(['GET'])
@permission_classes([AllowAny])
def get_approved_courses(request):
    try:
        query = request.GET.get('q', '').strip()

        # ‚úÖ ‡∏î‡∏∂‡∏á‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        banners = Banner.objects.filter(status="approved").values("id", "image")

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        approved_courses = Course.objects.filter(status='approved', is_closed=False).values(
            "id", "title", "price", "image", "instructor"
        )

        approved_video_courses = VideoCourse.objects.filter(status='approved').values(
            "id", "title", "price", "image", "instructor"
        )

        # ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        def get_image_url(image_path):
            if image_path:
                return request.build_absolute_uri(f"{settings.MEDIA_URL}{image_path}")
            return None

        # ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏õ‡πá‡∏ô JSON
        courses_data = [
            {
                "id": course["id"],
                "title": course["title"],  
                "price": course["price"],
                "image_url": get_image_url(course["image"]),  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL
                "instructor": course["instructor"],
                "type": "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏à‡∏≠‡∏á"
            }
            for course in approved_courses
        ]

        video_courses_data = [
            {
                "id": course["id"],
                "title": course["title"],  
                "price": course["price"],
                "image_url": get_image_url(course["image"]),  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL
                "instructor": course["instructor"],
                "type": "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠"
            }
            for course in approved_video_courses
        ]

        banners_data = [
            {
                "id": banner["id"],
                "image_url": get_image_url(banner["image"]),  # ‚úÖ ‡πÅ‡∏Å‡πâ URL
            }
            for banner in banners
        ]

        return Response({
            "banners": banners_data,
            "courses": courses_data,
            "video_courses": video_courses_data
        }, status=200)
    
    except Exception as e:
        return Response({'error': str(e)}, status=400)


@api_view(['GET'])
@permission_classes([AllowAny])  # ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡∏ô‡∏µ‡πâ
def banners_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    """
    try:
        banners = Banner.objects.all()
        banners_data = [
            {
                'id': banner.id,
                'image_url': request.build_absolute_uri(banner.image.url) if banner.image else None
            }
            for banner in banners
        ]
        return Response(banners_data, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)
    
#---------------------------------------------api ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å --------------------------------------------------------


#---------------------------------------------api ‡∏ú‡πâ‡∏π‡∏™‡∏≠‡∏ô --------------------------------------------------------
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def instructor_profile_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Instructor
    """
    user = request.user
    profile = user.profile
    data = {
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "email": user.email,
        "profile_picture": request.build_absolute_uri(profile.profile_picture.url) if profile.profile_picture else None
        
    }
    return Response(data, status=status.HTTP_200_OK)

    

@api_view(['PUT'])
@permission_classes([IsAuthenticated])
def update_instructor_profile_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Instructor
    """
    user = request.user
    profile = user.profile

    user.username = request.data.get('username', user.username)
    user.first_name = request.data.get('first_name', user.first_name)
    user.last_name = request.data.get('last_name', user.last_name)
    user.email = request.data.get('email', user.email)
    
    if 'profile_picture' in request.FILES:
        if profile.profile_picture:
            profile.profile_picture.delete()  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        profile.profile_picture = request.FILES['profile_picture']

    user.save()
    profile.save()

    return Response({"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}, status=status.HTTP_200_OK)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def instructor_sales_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Instructor ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö
    """
    try:
        active_tab = request.GET.get("type", "booking")

        # ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á)
        booked_courses = Course.objects.filter(
            id__in=CourseBooking.objects.values("course_id")
        ).annotate(booking_count=Count("coursebooking"))

        # ‚úÖ ‡∏´‡∏≤ CourseDetails ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        course_details_dict = {cd.course_id: cd for cd in CourseDetails.objects.filter(course__in=booked_courses)}

        # ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠)
        purchased_courses = VideoCourse.objects.filter(
            id__in=VideoCourseOrder.objects.values("course_id")
        ).annotate(purchase_count=Count("videocourseorder"))

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        data = {
            "active_tab": active_tab,
            "booked_courses": [
                {
                    "course_id": course.id,
                    "course_name": course.title if course.title else "N/A",
                    "booking_count": course.booking_count,
                    "course_image": request.build_absolute_uri(course.image.url)
                    if course.image and hasattr(course.image, "url")
                    else None,
                    "details": {
                        "course_title": course_details_dict[course.id].name if course.id in course_details_dict else "N/A",
                        "course_description": course_details_dict[course.id].description if course.id in course_details_dict else "N/A",
                        "course_price": float(course.price) if course.price else 0.0,
                    }
                }
                for course in booked_courses
            ],
            "purchased_courses": [
                {
                    "course_id": course.id,
                    "course_name": course.title if course.title else "N/A",
                    "purchase_count": course.purchase_count,
                    "course_image": request.build_absolute_uri(course.image.url)
                    if course.image and hasattr(course.image, "url")
                    else None,
                    "price": float(course.price) if course.price else 0.0,
                }
                for course in purchased_courses
            ]
        }

        return Response(data, status=200)

    except Exception as e:
        return Response({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)
    
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def instructor_booking_detail_api(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Ç‡∏≠‡∏á Instructor
    """
    try:
        # ‚úÖ ‡∏î‡∏∂‡∏á Course ‡∏à‡∏≤‡∏Å `course_id`
        course = get_object_or_404(Course, id=course_id)

        search_query = request.GET.get("search", "")

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å `CourseBooking`
        bookings = CourseBooking.objects.select_related("user").filter(course=course).order_by("-booking_date")

        if search_query:
            bookings = bookings.filter(student_name__icontains=search_query)  # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô

        paginator = Paginator(bookings, 10)
        page_number = request.GET.get("page")
        bookings_page = paginator.get_page(page_number)

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        data = {
            "course": {
                "id": course.id,
                "title": course.title,
            },
            "bookings": [
                {
                    "student_name_th": booking.student_name,
                    "student_name_en": booking.student_name_en,
                    "nickname_th": booking.nickname_th,
                    "nickname_en": booking.nickname_en,
                    "age": booking.age,
                    "grade": booking.grade,
                    "parent_nickname": booking.parent_nickname,
                    "phone": booking.phone,
                    "line_id": booking.line_id if booking.line_id else "‡πÑ‡∏°‡πà‡∏°‡∏µ",
                    "email": booking.user.email if booking.user else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    "selected_course": booking.selected_course,
                    "payment_slip": request.build_absolute_uri(booking.payment_slip.url) if booking.payment_slip else None,
                    "booking_status": booking.get_booking_status_display(),
                    "booking_date": booking.booking_date.strftime('%Y-%m-%d %H:%M:%S'),
                }
                for booking in bookings_page
            ],
            "pagination": {
                "current_page": bookings_page.number,
                "total_pages": bookings_page.paginator.num_pages,
                "has_next": bookings_page.has_next(),
                "has_previous": bookings_page.has_previous(),
            }
        }

        return Response(data, status=200)

    except Exception as e:
        return Response({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)
    
@api_view(["DELETE"])
@permission_classes([IsAuthenticated])
def delete_banner_api(request, banner_id):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô"""
    banner = get_object_or_404(Banner, id=banner_id, instructor=request.user)

    banner.delete()
    return Response({"message": "‚úÖ ‡∏•‡∏ö‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_200_OK)

@api_view(["POST"])
@permission_classes([IsAuthenticated])
def add_banner_api(request):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Banner ‡πÉ‡∏´‡∏°‡πà"""
    image = request.FILES.get("banner_image")
    if not image:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"}, status=status.HTTP_400_BAD_REQUEST)

    banner = Banner.objects.create(
        instructor=request.user,
        image=image,
        status="pending"
    )
    return Response({"message": "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô"}, status=status.HTTP_201_CREATED)


@api_view(["GET"])
@permission_classes([IsAuthenticated])
def list_banners_api(request):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Banner ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô"""
    banners = Banner.objects.filter(instructor=request.user)
    serializer = BannerSerializer(banners, many=True, context={"request": request})
    return Response(serializer.data, status=status.HTTP_200_OK)


@api_view(["GET"])
@permission_classes([IsAdminUser])
def list_pending_banners_api(request):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Banner ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (Admin)"""
    banners = Banner.objects.filter(status="pending")
    serializer = BannerSerializer(banners, many=True)
    return Response(serializer.data)


@api_view(["POST"])
@permission_classes([IsAdminUser])
def approve_banner_api(request, banner_id):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ Banner (Admin)"""
    banner = get_object_or_404(Banner, id=banner_id)
    banner.status = "approved"
    banner.rejection_message = ""
    banner.save()
    return Response({"message": "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_200_OK)


@api_view(["POST"])
@permission_classes([IsAdminUser])
def reject_banner_api(request, banner_id):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò Banner (Admin)"""
    try:
        data = json.loads(request.body)
        rejection_message = data.get("rejection_message", "")

        banner = get_object_or_404(Banner, id=banner_id)
        banner.status = "rejected"
        banner.rejection_message = rejection_message
        banner.save()

        return Response({"message": "‚õî ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
    

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def list_reservation_courses_api(request):
    """
    ‚úÖ API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ (revision_message)
    """
    try:
        courses = Course.objects.all()
        courses_data = []

        for course in courses:
            courses_data.append({
                'id': course.id,
                'title': course.title,
                'price': str(course.price),
                'instructor': course.instructor,
                'created_at': course.created_at.strftime('%Y-%m-%d %H:%M:%S'),
                'status': course.status,
                'revision_message': course.revision_message if course.status == 'revision' else None,  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
                'image_url': request.build_absolute_uri(course.image.url) if course.image else None,  # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á URL ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                'is_closed': course.is_closed,
            })

        return Response(courses_data, status=status.HTTP_200_OK)

    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def add_course_api(request):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    """
    try:
        title = request.data.get('title')
        description = request.data.get('description')
        instructor = request.data.get('instructor')
        price = request.data.get('price')
        image = request.FILES.get('image')

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
        if not title or not description or not instructor or not price:
            return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á"}, status=status.HTTP_400_BAD_REQUEST)

        course = Course.objects.create(
            title=title,
            description=description,
            instructor=instructor,
            price=price,
            image=image,
            added_by=request.user  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™
        )
        return Response({"message": "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "course_id": course.id}, status=status.HTTP_201_CREATED)

    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
    
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def add_course_details_api(request, course_id):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    """
    try:
        course = get_object_or_404(Course, id=course_id)

        name = request.data.get('name')
        description = request.data.get('description')
        additional_description = request.data.get('additional_description')
        image = request.FILES.get('image')
        additional_image = request.FILES.get('additional_image')
        extra_image_1 = request.FILES.get('extra_image_1')
        extra_image_2 = request.FILES.get('extra_image_2')

        if not name or not description or not additional_description:
            return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á"}, status=status.HTTP_400_BAD_REQUEST)

        course_details = CourseDetails.objects.create(
            course=course,
            name=name,
            description=description,
            additional_description=additional_description,
            image=image,
            additional_image=additional_image,
            extra_image_1=extra_image_1,
            extra_image_2=extra_image_2
        )
        return Response({"message": "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_201_CREATED)

    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
    
@api_view(['PUT'])
@parser_classes([MultiPartParser, FormParser])  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
@permission_classes([IsAuthenticated])
def edit_course_api(request, course_id):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å)
    """
    course = get_object_or_404(Course, id=course_id, added_by=request.user)

    title = request.data.get("title")
    description = request.data.get("description")
    instructor = request.data.get("instructor")
    price = request.data.get("price")
    image = request.FILES.get("image")

    if not title or not description or not price or not instructor:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"}, status=400)

    course.title = title
    course.description = description
    course.instructor = instructor
    course.price = price

    if image:
        # ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if course.image and os.path.exists(course.image.path):
            os.remove(course.image.path)
        course.image = image

    course.save()

    return Response({"message": "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=200)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_course_api(request, course_id):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á
    """
    course = get_object_or_404(Course, id=course_id, added_by=request.user)

    return Response({
        "id": course.id,
        "title": course.title,
        "description": course.description,
        "instructor": course.instructor,
        "price": course.price,
        "image_url": request.build_absolute_uri(course.image.url) if course.image else None,
        "created_at": course.created_at,
    })

@api_view(['PUT'])  
@parser_classes([MultiPartParser, FormParser])
@permission_classes([IsAuthenticated])
def edit_course_details_api(request, course_id):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á
    """
    course_details = get_object_or_404(CourseDetails, course__id=course_id)

    course_details.name = request.data.get('name', course_details.name)
    course_details.description = request.data.get('description', course_details.description)
    course_details.additional_description = request.data.get('additional_description', course_details.additional_description)

    if 'image' in request.FILES:
        course_details.image = request.FILES['image']
    if 'additional_image' in request.FILES:
        course_details.additional_image = request.FILES['additional_image']
    if 'extra_image_1' in request.FILES:
        course_details.extra_image_1 = request.FILES['extra_image_1']
    if 'extra_image_2' in request.FILES:
        course_details.extra_image_2 = request.FILES['extra_image_2']

    course_details.save()

    return Response({
        "message": "‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        "course_id": course_details.course.id
    }, status=status.HTTP_200_OK)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def get_course_details_api(request, course_id):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á
    """
    course_details = get_object_or_404(CourseDetails, course__id=course_id, course__added_by=request.user)

    return Response({
        "name": course_details.name,
        "description": course_details.description,
        "additional_description": course_details.additional_description,
        "image": course_details.image.url if course_details.image else None,
        "additional_image": course_details.additional_image.url if course_details.additional_image else None,
        "extra_image_1": course_details.extra_image_1.url if course_details.extra_image_1 else None,
        "extra_image_2": course_details.extra_image_2.url if course_details.extra_image_2 else None,
    }, status=status.HTTP_200_OK)
 
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def submit_course_review_api(request, course_id):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"""
    try:
        course = get_object_or_404(Course, id=course_id, instructor=request.user)
        course.status = 'pending'  # ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        course.save()

        return Response({'message': '‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß!'}, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


@api_view(['DELETE'])
@permission_classes([IsAuthenticated])
def delete_course_api(request, course_id):
    """‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (Mobile)"""
    course = get_object_or_404(Course, id=course_id,)
    print(f"üìå Added_by (ID ‡∏ú‡∏π‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™): {course.added_by_id}")
    print(f"üìå User ID ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô: {request.user.id}")

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ ID
    if course.added_by_id != request.user.id:
        return Response({"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ"}, status=status.HTTP_403_FORBIDDEN)

    # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    course.delete()
    return Response({"message": "‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"},status=status.HTTP_200_OK)  

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def close_course_api(request, course_id):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    """
    try:
        course = get_object_or_404(Course, id=course_id)
        course.is_closed = True
        course.save()
        return Response({"message": "‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"}, status=status.HTTP_200_OK)
    except Course.DoesNotExist:
        return Response({"error": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£"}, status=status.HTTP_404_NOT_FOUND)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def reopen_course_api(request, course_id):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    """
    try:
        course = get_object_or_404(Course, id=course_id)
        course.is_closed = False
        course.save()
        return Response({"message": "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"}, status=status.HTTP_200_OK)
    except Course.DoesNotExist:
        return Response({"error": "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£"}, status=status.HTTP_404_NOT_FOUND)




#---------------------------------------------api ‡∏ú‡πâ‡∏π‡∏™‡∏≠‡∏ô --------------------------------------------------------


#---------------------------------------------api ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô --------------------------------------------------------


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def profile_admin_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Admin
    """
    user = request.user
    profile = user.profile
    data = {
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "email": user.email,
        "profile_picture": request.build_absolute_uri(profile.profile_picture.url) if profile.profile_picture else None
        
    }
    return Response(data, status=status.HTTP_200_OK)

@api_view(['PUT'])
@permission_classes([IsAuthenticated])
def update_profile_admin_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á Admin
    """
    user = request.user
    profile = user.profile

    user.username = request.data.get('username', user.username)
    user.first_name = request.data.get('first_name', user.first_name)
    user.last_name = request.data.get('last_name', user.last_name)
    user.email = request.data.get('email', user.email)
    
    if 'profile_picture' in request.FILES:
        if profile.profile_picture:
            profile.profile_picture.delete()  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        profile.profile_picture = request.FILES['profile_picture']

    user.save()
    profile.save()

    return Response({"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}, status=status.HTTP_200_OK)


@api_view(["GET"])
@permission_classes([IsAuthenticated])
def sales_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á Instructor ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡πá‡∏ö
    """
    try:
        active_tab = request.GET.get("type", "booking")

        # ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á)
        booked_courses = Course.objects.filter(
            id__in=CourseBooking.objects.values("course_id")
        ).annotate(booking_count=Count("coursebooking"))

        # ‚úÖ ‡∏´‡∏≤ CourseDetails ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        course_details_dict = {cd.course_id: cd for cd in CourseDetails.objects.filter(course__in=booked_courses)}

        # ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠)
        purchased_courses = VideoCourse.objects.filter(
            id__in=VideoCourseOrder.objects.values("course_id")  # ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
        ).annotate(purchase_count=Count("videocourseorder"))  # ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        data = {
            "active_tab": active_tab,
            "booked_courses": [
                {
                    "course_id": course.id,
                    "course_name": course.title if course.title else "N/A",
                    "booking_count": course.booking_count,
                    "course_image": request.build_absolute_uri(course.image.url)
                    if course.image and hasattr(course.image, "url")
                    else None,  
                    "details": {
                        "course_title": course_details_dict[course.id].name if course.id in course_details_dict else "N/A",
                        "course_description": course_details_dict[course.id].description if course.id in course_details_dict else "N/A",
                        "course_price": float(course.price) if course.price else 0.0,
                    }
                }
                for course in booked_courses
            ],
            "purchased_courses": [
                {
                    "course_id": course.id,
                    "course_name": course.title if course.title else "N/A",
                    "purchase_count": course.purchase_count,
                    "course_image": request.build_absolute_uri(course.image.url)
                    if course.image and hasattr(course.image, "url")
                    else None,  
                    "details": {
                        "course_title": course.title,
                        "course_description": course.description if course.description else "N/A",
                        "course_price": float(course.price) if course.price else 0.0,
                    }
                }
                for course in purchased_courses
            ]
        }

        return Response(data, status=200)

    except Exception as e:
        return Response({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)

   
@api_view(["GET"])
@permission_classes([IsAuthenticated])
def Admin_booking_detail_api(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Ç‡∏≠‡∏á Instructor
    """
    try:
        # ‚úÖ ‡∏î‡∏∂‡∏á Course ‡∏à‡∏≤‡∏Å `course_id`
        course = get_object_or_404(Course, id=course_id)

        search_query = request.GET.get("search", "")

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å `CourseBooking`
        bookings = CourseBooking.objects.select_related("user").filter(course=course).order_by("-booking_date")

        if search_query:
            bookings = bookings.filter(student_name__icontains=search_query)  # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô

        paginator = Paginator(bookings, 10)
        page_number = request.GET.get("page")
        bookings_page = paginator.get_page(page_number)

        # ‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        data = {
            "course": {
                "id": course.id,
                "title": course.title,
            },
            "bookings": [
                {
                    "id": booking.id,
                    "student_name_th": booking.student_name,
                    "student_name_en": booking.student_name_en,
                    "nickname_th": booking.nickname_th,
                    "nickname_en": booking.nickname_en,
                    "age": booking.age,
                    "grade": booking.grade,
                    "parent_nickname": booking.parent_nickname,
                    "phone": booking.phone,
                    "line_id": booking.line_id if booking.line_id else "‡πÑ‡∏°‡πà‡∏°‡∏µ",
                    "email": booking.user.email if booking.user else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
                    "selected_course": booking.selected_course,
                    "payment_slip": request.build_absolute_uri(booking.payment_slip.url) if booking.payment_slip else None,
                    "booking_status": booking.get_booking_status_display(),
                    "booking_date": booking.booking_date.strftime('%Y-%m-%d %H:%M:%S'),
                }
                for booking in bookings_page
            ],
            "pagination": {
                "current_page": bookings_page.number,
                "total_pages": bookings_page.paginator.num_pages,
                "has_next": bookings_page.has_next(),
                "has_previous": bookings_page.has_previous(),
            }
        }

        return Response(data, status=200)

    except Exception as e:
        return Response({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)



@api_view(["GET"])
@permission_classes([IsAuthenticated])
def user_list_api(request):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô
    """
    domain = request.build_absolute_uri('/')[:-1]  # ‚úÖ ‡∏ï‡∏±‡∏î `/` ‡∏ó‡πâ‡∏≤‡∏¢ URL ‡∏≠‡∏≠‡∏Å
    print(f"üåê Domain: {domain}")
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ InstructorProfile)
    members = User.objects.filter(instructor_profile__isnull=True).values(
        "id", "first_name", "last_name", "email"
    )

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    instructors = InstructorProfile.objects.select_related("user").all()
    instructor_data = [
        {
            "id": instructor.user.id,
            "first_name": instructor.user.first_name,
            "last_name": instructor.user.last_name,
            "email": instructor.user.email,
            "subject": instructor.subject,
            "phone": instructor.phone,
            "profile_picture": f"{domain}{instructor.profile_picture.url}" if instructor.profile_picture else None,
        }
        for instructor in instructors
    ]
    print("üë®‚Äçüè´ Instructor Data:", instructor_data)

    return Response(
        {
            "members": list(members),
            "instructors": instructor_data,
        },
        status=200,
    )


@api_view(["POST"])
@permission_classes([AllowAny])  # ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ API ‡∏ô‡∏µ‡πâ
def register_instructor_api(request):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô
    """
    data = request.data
    username = data.get("username")
    first_name = data.get("first_name")
    last_name = data.get("last_name")
    email = data.get("email")
    phone = data.get("phone")
    age = data.get("age")
    subject = data.get("subject")
    password = data.get("password")
    password2 = data.get("password2")
    profile_picture = request.FILES.get("profile_picture")

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if password != password2:
        return Response({"error": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"}, status=HTTP_400_BAD_REQUEST)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if User.objects.filter(username=username).exists():
        return Response({"error": "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß"}, status=HTTP_400_BAD_REQUEST)
    
    if User.objects.filter(email=email).exists():
        return Response({"error": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"}, status=HTTP_400_BAD_REQUEST)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á User ‡πÉ‡∏´‡∏°‡πà
    user = User.objects.create(
        username=username,
        first_name=first_name,
        last_name=last_name,
        email=email,
        password=make_password(password),  # üîπ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    )

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° "Instructor"
    instructor_group, created = Group.objects.get_or_create(name="Instructor")
    user.groups.add(instructor_group)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á InstructorProfile
    instructor_profile = InstructorProfile.objects.create(
        user=user,
        profile_picture=profile_picture,
        phone=phone,
        age=age,
        subject=subject,
    )

    return Response({"message": "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}, status=HTTP_201_CREATED)



# ‚úÖ API ‡∏î‡∏∂‡∏á‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (Admin Only)
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def banners_admin_api(request):
    banners = Banner.objects.filter(status="pending")
    banners_data = [
        {
            'id': banner.id,
            'image_url': request.build_absolute_uri(banner.image.url) if banner.image else None,
            'created_at': banner.created_at.strftime('%d/%m/%Y %H:%M')
        }
        for banner in banners
    ]
    return Response(banners_data, status=status.HTTP_200_OK)


# ‚úÖ API ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå (Admin Only)
@api_view(['POST'])
@permission_classes([IsAuthenticated]) 
def Admin_approve_banner_api(request, banner_id):
    banner = get_object_or_404(Banner, id=banner_id)
    banner.status = "approved"
    banner.rejection_message = ""
    banner.save()
    return Response({"message": "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_200_OK)


# ‚úÖ API ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå (Admin Only)
@api_view(['POST'])
@permission_classes([IsAuthenticated]) 
def Admin_reject_banner_api(request, banner_id):
    try:
        data = json.loads(request.body)
        rejection_message = data.get("rejection_message", "")

        banner = get_object_or_404(Banner, id=banner_id)
        banner.status = "rejected"
        banner.rejection_message = rejection_message
        banner.save()

        return Response({"message": "‚õî ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
    

@api_view(['POST'])
@permission_classes([IsAuthenticated])  # ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API
def api_upload_payment_qr(request, course_id):
    """
    ‚úÖ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    """
    course = get_object_or_404(Course, id=course_id)

    if "payment_qr" not in request.FILES:
        return Response({"error": "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå QR Code"}, status=status.HTTP_400_BAD_REQUEST)

    payment_qr = request.FILES["payment_qr"]
    fs = FileSystemStorage()
    filename = fs.save(payment_qr.name, payment_qr)

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    course.payment_qr = filename
    course.save()

    return Response({"message": "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!"}, status=status.HTTP_200_OK)

# ‚úÖ API ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (pending, revised)
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def api_review_booking_courses(request):
    courses = Course.objects.filter(status__in=['pending', 'revised'])
    serializer = CourseSerializer(courses, many=True, context={'request': request})
    return Response(serializer.data, status=status.HTTP_200_OK)


# ‚úÖ API ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏™ (Admin Only)
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def api_approve_course(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if not course.payment_qr:
        return Response({"error": "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"}, status=status.HTTP_400_BAD_REQUEST)

    course.status = 'approved'
    course.save()
    
    return Response({"message": "‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_200_OK)


# ‚úÖ API ‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (Admin Only)
@api_view(['POST'])
@permission_classes([IsAuthenticated])
def api_send_back_course(request, course_id):
    try:
        data = request.data
        revision_message = data.get("revision_message", "")

        course = get_object_or_404(Course, id=course_id)
        course.status = 'revision'
        course.revision_message = revision_message
        course.save()

        return Response({"message": "‚õî ‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"}, status=status.HTTP_200_OK)
    except Exception as e:
        return Response({"error": str(e)}, status=status.HTTP_400_BAD_REQUEST)
    

@api_view(["POST"])
@permission_classes([IsAuthenticated])  # ‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô API
def update_booking_status_api(request, booking_id):
    """
    ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡∏ö‡∏≤‡∏¢)
    """
    booking = get_object_or_404(CourseBooking, id=booking_id)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ 'status' ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Request
    new_status = request.data.get("status")
    if new_status not in ["confirmed", "rejected"]:
        return Response({"error": "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}, status=status.HTTP_400_BAD_REQUEST)

    # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    booking.booking_status = new_status
    booking.save()

    # ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    messages.success(request, f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô {booking.get_booking_status_display()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    return Response(
        {"message": f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô {booking.get_booking_status_display()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!"},
        status=status.HTTP_200_OK
    )

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def admin_dashboard_api(request):
    """ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÉ‡∏ô‡πÅ‡∏≠‡∏õ‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠) """
    
    today = datetime.today().date()

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠
    total_booking_courses = CourseBooking.objects.filter(booking_status="confirmed").count()
    total_video_courses = VideoCourseOrder.objects.filter(payment_status="confirmed").count()

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
    video_courses = VideoCourse.objects.values_list('id', 'price')
    video_prices = {course_id: price for course_id, price in video_courses}

    # ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    total_income = (
        CourseBooking.objects.filter(booking_status="confirmed").aggregate(total=Sum('course__price'))['total'] or 0
    ) + (
        sum(
            video_prices.get(order.course_id, 0)
            for order in VideoCourseOrder.objects.filter(payment_status="confirmed")
        )
    )

    # ‚úÖ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    booking_income = CourseBooking.objects.filter(booking_status="confirmed").aggregate(total=Sum('course__price'))['total'] or 0
    video_income = sum(
        video_prices.get(order.course_id, 0)
        for order in VideoCourseOrder.objects.filter(payment_status="confirmed")
    )

    # ‚úÖ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    course_revenues = []

    # ‚úÖ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏à‡∏≠‡∏á
    courses = CourseBooking.objects.filter(booking_status="confirmed").values('course__title').annotate(
        total_income=Sum('course__price'), total_students=Count('id')
    )
    for course in courses:
        course_revenues.append({
            "title": course['course__title'],
            "type": "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏à‡∏≠‡∏á",
            "total_students": course['total_students'],
            "revenue": course['total_income']
        })

    # ‚úÖ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    video_revenues = VideoCourseOrder.objects.filter(payment_status="confirmed").values('course_id').annotate(
        total_students=Count('course_id')
    )
    for course in video_revenues:
        course_revenues.append({
            "title": VideoCourse.objects.get(id=course['course_id']).title,
            "type": "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
            "total_students": course['total_students'],
            "revenue": video_prices.get(course['course_id'], 0) * course['total_students']
        })

    # ‚úÖ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    monthly_income = []
    thai_months = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.",
                   "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."]
    
    for month in range(1, 13):
        monthly_booking = CourseBooking.objects.filter(
            booking_status="confirmed",
            booking_date__month=month
        ).aggregate(total=Sum('course__price'))['total'] or 0

        monthly_video = sum(
            video_prices.get(order.course_id, 0)
            for order in VideoCourseOrder.objects.filter(payment_status="confirmed", payment_date__month=month)
        )

        monthly_total = monthly_booking + monthly_video
        monthly_income.append({
            "month": thai_months[month - 1],
            "total_income": monthly_total
        })

    return Response({
        "total_income": total_income,
        "booking_income": booking_income,
        "video_income": video_income,
        "total_booking_courses": total_booking_courses,
        "total_video_courses": total_video_courses,
        "course_revenues": course_revenues,
        "monthly_income": monthly_income,
    })


@api_view(["GET"])
@permission_classes([IsAuthenticated])
def course_revenue_api(request):
    """ API ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î """

    course_revenues = []
    courses = CourseBooking.objects.filter(booking_status="confirmed").values('course__title').annotate(
        total_income=Sum('course__price'), total_students=Count('id')
    )

    for course in courses:
        course_revenues.append({
            "title": course['course__title'],
            "type": "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏à‡∏≠‡∏á",
            "total_students": course['total_students'],
            "revenue": course['total_income']
        })

    video_courses = VideoCourse.objects.values_list('name', 'price')
    video_prices = {name: price for name, price in video_courses}

    video_revenues = CourseOrder.objects.filter(status="paid").values('course_name').annotate(
        total_students=Count('course_name')
    )

    for course in video_revenues:
        course_revenues.append({
            "title": course['course_name'],
            "type": "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
            "total_students": course['total_students'],
            "revenue": video_prices.get(course['course_name'], 0) * course['total_students']
        })

    return Response({"course_revenues": course_revenues})

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def monthly_income_api(request):
    """ API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô """

    monthly_income = []
    thai_months = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.",
                   "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."]

    video_courses = VideoCourse.objects.values_list('id', 'price')
    video_prices = {course_id: price for course_id, price in video_courses}

    for month in range(1, 13):
        monthly_booking = CourseBooking.objects.filter(
            booking_status="confirmed",
            booking_date__month=month
        ).aggregate(total=Sum('course__price'))['total'] or 0

        monthly_video = sum(
            video_prices.get(order.course_id, 0)
            for order in VideoCourseOrder.objects.filter(payment_status="confirmed", payment_date__month=month)
        )

        monthly_total = monthly_booking + monthly_video
        monthly_income.append({
            "month": thai_months[month - 1],
            "total_income": monthly_total
        })

    return Response({"monthly_income": monthly_income})


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PIN 6 ‡∏´‡∏•‡∏±‡∏Å
def generate_pin():
    return ''.join(random.choices(string.digits, k=6))


# ‚úÖ 1. API ‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™ PIN ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
@api_view(["POST"])
@permission_classes([AllowAny])
def request_reset_password_api(request):
    email = request.data.get("email")
    if not email:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•"}, status=400)

    try:
        user = User.objects.get(email=email)
        pin = generate_pin()
        expires_at = now() + timedelta(minutes=5)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PIN ‡πÉ‡∏ô session
        request.session["reset_pin"] = {"pin": pin, "expires_at": expires_at.isoformat()}
        request.session["reset_email"] = email

        # ‚úÖ ‡∏™‡πà‡∏á PIN ‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        send_mail(
            "‡∏£‡∏´‡∏±‡∏™ PIN ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
            f"‡∏£‡∏´‡∏±‡∏™ PIN ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ {pin} (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ)",
            settings.EMAIL_HOST_USER,
            [email],
            fail_silently=False,
        )

        return Response({"message": "‡∏£‡∏´‡∏±‡∏™ PIN ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß"})
    except User.DoesNotExist:
        return Response({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"}, status=404)


# ‚úÖ 2. API ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™ PIN
@api_view(["POST"])
@permission_classes([AllowAny])
def verify_reset_password_api(request):
    entered_pin = request.data.get("pin")
    if not entered_pin:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™ PIN"}, status=400)

    session_data = request.session.get("reset_pin", {})

    if not session_data:
        return Response({"error": "‡∏£‡∏´‡∏±‡∏™ PIN ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà"}, status=400)

    stored_pin = session_data.get("pin")
    expires_at = session_data.get("expires_at")

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PIN ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if expires_at and now() > datetime.datetime.fromisoformat(expires_at):
        del request.session["reset_pin"]
        return Response({"error": "‡∏£‡∏´‡∏±‡∏™ PIN ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà"}, status=400)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PIN ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if entered_pin == stored_pin:
        return Response({"message": "‡∏£‡∏´‡∏±‡∏™ PIN ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
    else:
        return Response({"error": "‡∏£‡∏´‡∏±‡∏™ PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}, status=400)


# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
def is_valid_password(password):
    return len(password) >= 8 and re.search(r"[0-9]", password)


# ‚úÖ 3. API ‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
@api_view(["POST"])
@permission_classes([AllowAny])
def reset_password_api(request):
    new_password = request.data.get("new_password")
    confirm_password = request.data.get("confirm_password")

    if not new_password or not confirm_password:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ä‡πà‡∏≠‡∏á"}, status=400)

    if new_password != confirm_password:
        return Response({"error": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"}, status=400)

    if not is_valid_password(new_password):
        return Response({"error": "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç"}, status=400)

    email = request.session.get("reset_email")
    if not email:
        return Response({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠ PIN ‡πÉ‡∏´‡∏°‡πà"}, status=400)

    try:
        user = User.objects.get(email=email)
        user.set_password(new_password)
        user.save()

        # ‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PIN ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å session
        request.session.pop("reset_pin", None)
        request.session.pop("reset_email", None)

        return Response({"message": "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
    except User.DoesNotExist:
        return Response({"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"}, status=404)


#---------------------------------------------api ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô --------------------------------------------------------


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def profile_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
    """
    user = request.user
    profile = user.profile
    data = {
        "username": user.username,
        "first_name": user.first_name,
        "last_name": user.last_name,
        "email": user.email,
        "profile_picture": request.build_absolute_uri(profile.profile_picture.url) if profile.profile_picture else None
        
    }
    return Response(data, status=status.HTTP_200_OK)


@api_view(['PUT'])
@permission_classes([IsAuthenticated])
def update_profile_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
    """
    user = request.user
    profile = user.profile

    user.username = request.data.get('username', user.username)
    user.first_name = request.data.get('first_name', user.first_name)
    user.last_name = request.data.get('last_name', user.last_name)
    user.email = request.data.get('email', user.email)
    
    if 'profile_picture' in request.FILES:
        if profile.profile_picture:
            profile.profile_picture.delete()  # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà
        profile.profile_picture = request.FILES['profile_picture']

    user.save()
    profile.save()

    return Response({"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}, status=status.HTTP_200_OK)

@api_view(['GET'])
def course_details_api(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ï‡∏≤‡∏° `course_id`
    """
    course_details = get_object_or_404(CourseDetails, course_id=course_id)  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CourseDetails
    add_course = course_details.course  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• add_course ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô ForeignKey

    def build_full_url(image_field):
        """ ‡πÅ‡∏õ‡∏•‡∏á Path ‡πÄ‡∏õ‡πá‡∏ô URL ‡πÄ‡∏ï‡πá‡∏° """
        if image_field and hasattr(image_field, 'url'):
            return request.build_absolute_uri(image_field.url)
        return None

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÄ‡∏ï‡πá‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    course_data = CourseDetailsSerializer(course_details).data
    add_course_data = AddCourseSerializer(add_course).data

    course_data["image"] = build_full_url(course_details.image)
    course_data["additional_image"] = build_full_url(course_details.additional_image)
    course_data["extra_image_1"] = build_full_url(course_details.extra_image_1)
    course_data["extra_image_2"] = build_full_url(course_details.extra_image_2)
    
    add_course_data["image"] = build_full_url(add_course.image)

    return Response({
        "course_details": course_data,
        "add_course": add_course_data
    }, status=status.HTTP_200_OK)



@api_view(['POST'])
@permission_classes([IsAuthenticated])
def api_submit_booking(request, course_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
    """
    course_details = get_object_or_404(CourseDetails, course_id=course_id)
    course_selected = course_details.course

    data = request.data
    selected_course = data.get("selected_course", "").strip()

    if not selected_course:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠"}, status=status.HTTP_400_BAD_REQUEST)

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API Request
    booking = CourseBooking.objects.create(
        user=request.user,
        student_name=data.get("student_name", ""),
        student_name_en=data.get("student_name_en", ""),
        nickname_th=data.get("nickname_th", ""),
        nickname_en=data.get("nickname_en", ""),
        age=data.get("age", ""),
        grade=data.get("grade", ""),
        other_grade=data.get("other_grade", ""),
        parent_nickname=data.get("parent_nickname", ""),
        phone=data.get("phone", ""),
        line_id=data.get("line_id", ""),
        course=course_selected,
        selected_course=selected_course,
        booking_status="pending",
        payment_status="pending"
    )

    return Response({
        "message": "‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô",
        "booking_id": booking.id
    }, status=status.HTTP_201_CREATED)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def api_payment_details(request, booking_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    """
    booking = get_object_or_404(CourseBooking, id=booking_id, user=request.user)
    course_details = get_object_or_404(CourseDetails, course=booking.course)
    course = course_details.course

    qr_code_url = request.build_absolute_uri(course.payment_qr.url) if course.payment_qr else None
    
    

    return Response({
        "booking_id": booking.id,
        "course_name": course.title,
        "course_price": course.price,
        "qr_code_url": qr_code_url,
        "payment_status": booking.payment_status
    }, status=status.HTTP_200_OK)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def api_submit_payment(request, booking_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    """
    booking = get_object_or_404(CourseBooking, id=booking_id, user=request.user)

    if "payment_slip" not in request.FILES:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ"}, status=status.HTTP_400_BAD_REQUEST)

    payment_slip = request.FILES["payment_slip"]
    fs = FileSystemStorage()
    filename = fs.save(payment_slip.name, payment_slip)

    # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    booking.payment_slip = filename
    booking.payment_status = "pending"
    booking.save()

    return Response({"message": "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"}, status=status.HTTP_200_OK)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def api_booking_status(request, booking_id):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    """
    booking = get_object_or_404(CourseBooking, id=booking_id, user=request.user)
    return Response({
        "booking_id": booking.id,
        "booking_status": booking.booking_status,
        "payment_status": booking.payment_status
    }, status=status.HTTP_200_OK)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def api_user_bookings(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    """
    bookings = CourseBooking.objects.filter(user=request.user)
    serializer = CourseBookingSerializer(bookings, many=True)
    return Response(serializer.data, status=status.HTTP_200_OK)


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def my_courses_api(request):
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠"""
    
    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á
    bookings = CourseBooking.objects.filter(user=request.user).order_by("-booking_date")
    response_data = []

    for booking in bookings:
        course_data = CourseSerializer(booking.course, context={'request': request}).data
        booking_data = CourseBookingSerializer(booking, context={'request': request}).data
        booking_data["course"] = course_data
        booking_data["type"] = "live_course"  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≠‡∏£‡πå‡∏™
        response_data.append(booking_data)

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠
    purchased_video_courses = VideoCourseOrder.objects.filter(user=request.user).order_by("-payment_date")

    for video_course in purchased_video_courses:
        video_course_data = VideoCourseOrderSerializer(video_course, context={'request': request}).data
        response_data.append({
            "id": video_course.id,
            "type": "video_course",  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
            "video_course": video_course_data,
            "purchased_date": video_course.payment_date,
        })

    return Response(response_data)

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def booking_my_courses_api(request, course_id):
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á)"""
    course = get_object_or_404(Course, id=course_id)

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    bookings = CourseBooking.objects.filter(course=course, user=request.user).order_by("-booking_date")

    if not bookings.exists():
        return Response({"error": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ"}, status=403)

    return Response({
        "course": CourseSerializer(course, context={'request': request}).data,
        "bookings": BookingDetailSerializer(bookings, many=True, context={'request': request}).data
    })


@api_view(['GET'])
@permission_classes([IsAuthenticated])
def user_booking_history_api(request):
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ï‡∏ô‡πÄ‡∏≠‡∏á)"""
    bookings = CourseBooking.objects.filter(user=request.user).order_by("-booking_date")
    serializer = BookingHistorySerializer(bookings, many=True, context={'request': request})

    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def verify_password_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    """
    try:
        # ‚úÖ ‡πÉ‡∏ä‡πâ request.data.get() ‡πÅ‡∏ó‡∏ô request.POST
        current_password = request.data.get("current_password")  
        
        if not current_password:
            return Response({"error": "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°"}, status=400)

        # ‚úÖ ‡πÉ‡∏ä‡πâ request.user ‡πÄ‡∏ä‡πá‡∏Ñ password ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        if request.user.check_password(current_password):
            return Response({"message": "‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "can_change": True}, status=200)
        else:
            return Response({"error": "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"}, status=400)

    except Exception as e:
        return Response({"error": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"}, status=500)


@api_view(['POST'])
@permission_classes([IsAuthenticated])
def change_password_api(request):
    """
    API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    """
    user = request.user
    new_password = request.data.get('new_password')
    confirm_new_password = request.data.get('confirm_new_password')

    if not new_password or not confirm_new_password:
        return Response({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"}, status=status.HTTP_400_BAD_REQUEST)

    if new_password != confirm_new_password:
        return Response({"error": "‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô"}, status=status.HTTP_400_BAD_REQUEST)

    # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
    user.set_password(new_password)
    user.save()

    # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï session auth ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏≠‡∏≤‡∏ï‡πå
    update_session_auth_hash(request, user)

    return Response({"message": "‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"}, status=status.HTTP_200_OK)

#-----------------------------------------------------------------‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ------------------------------------------------------------------------------------------------------------------------------------------------------------------



def sales(request):
    active_tab = request.GET.get("type", "booking")

    # ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    booked_courses = Course.objects.filter(
        id__in=CourseBooking.objects.values("course_id")
    ).annotate(booking_count=Count("coursebooking"))

    # ‚úÖ ‡∏´‡∏≤ CourseDetails ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    course_details_dict = {cd.course_id: cd for cd in CourseDetails.objects.filter(course__in=booked_courses)}

    # ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
    purchased_courses = VideoCourse.objects.filter(
        id__in=VideoCourseOrder.objects.values("course_id")  # ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ VideoCourseOrder
    ).annotate(purchase_count=Count("videocourseorder"))  # ‡πÉ‡∏ä‡πâ related_name ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

    return render(request, "admin/sales.html", {
        "booked_courses": booked_courses,
        "course_details_dict": course_details_dict,  
        "purchased_courses": purchased_courses,  # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà Template
        "active_tab": active_tab,
    })


def booking_detail(request, course_id):
    # ‚úÖ ‡∏î‡∏∂‡∏á Course ‡∏à‡∏≤‡∏Å `course_id`
    course = get_object_or_404(Course, id=course_id)

    search_query = request.GET.get("search", "")

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å `CourseBooking`
    bookings = CourseBooking.objects.filter(course=course).order_by("-booking_date")

    if search_query:
        bookings = bookings.filter(student_name__icontains=search_query)

    paginator = Paginator(bookings, 10)
    page_number = request.GET.get("page")
    bookings_page = paginator.get_page(page_number)

    return render(request, "admin/booking_detail.html", {
        "course": course,
        "bookings": bookings_page,
    })





def upload_payment_qr(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if request.method == "POST" and 'payment_qr' in request.FILES:
        course.payment_qr = request.FILES['payment_qr']
        course.save()
        messages.success(request, "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect('review_booking_courses')

    messages.error(request, "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå QR Code")
    return redirect('review_booking_courses')

def review_booking_courses(request):
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'pending' ‡∏´‡∏£‡∏∑‡∏≠ 'revised'
    courses = Course.objects.filter(status__in=['pending', 'revised'])
    return render(request, 'admin/review_booking_courses.html', {'courses': courses})


def delete_selected_courses(request):
    if request.method == 'POST':
        # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ID ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å checkbox
        selected_ids = request.POST.getlist('selected_courses')

        if selected_ids:
            # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ ID ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            courses_to_delete = Course.objects.filter(id__in=selected_ids)

            # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
            for course in courses_to_delete:
                course.delete()

            messages.success(request, f"‡∏•‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(selected_ids)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        else:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
    
    # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á
    return redirect('reservation_courses')

def approve_course(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if not course.payment_qr:
        messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î QR Code ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥")
        return redirect('review_booking_courses')

    course.status = 'approved'  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    course.save()
    messages.success(request, '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!')
    return redirect('review_booking_courses')  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™




def send_back_course(request, course_id):
    if request.method == 'POST':
        revision_message = request.POST.get('revision_message')

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        course = get_object_or_404(Course, id=course_id)
        course.status = 'revision'  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "revision"
        course.revision_message = revision_message  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
        course.save()

        messages.success(request, '‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!')
        return redirect('review_booking_courses')
    else:
        # ‡∏Å‡∏£‡∏ì‡∏µ GET method
        return HttpResponseRedirect(reverse('review_booking_courses'))
    

from django.db.models import Case, When, Count, Sum, DecimalField, OuterRef, Subquery, Value, F

def generate_graphs(booking_income_query, video_income_query, filter_type, course_type):
    """ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô """
    
    course_names = []
    course_earnings = []

    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
    if filter_type == "daily":
        today = datetime.today().date()
        booking_income_query = booking_income_query.filter(booking_date=today)
        video_income_query = video_income_query.filter(payment_date=today)
    elif filter_type == "monthly":
        today = datetime.today()
        booking_income_query = booking_income_query.filter(booking_date__month=today.month)
        video_income_query = video_income_query.filter(payment_date__month=today.month)

    # ‚úÖ **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏à‡∏≠‡∏á**
    if course_type in ["all", "booking"]:
        course_booking_totals = (
            booking_income_query.values('course__title')
            .annotate(total_income=Sum('course__price'))
        )
        for booking in course_booking_totals:
            course_names.append(booking['course__title'])
            course_earnings.append(booking['total_income'])

    # ‚úÖ **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠**
    if course_type in ["all", "video"]:
        video_courses = VideoCourse.objects.values_list('id', 'price')  # ‡∏î‡∏∂‡∏á 'id' ‡πÅ‡∏ó‡∏ô 'title'
        video_prices = {course_id: price for course_id, price in video_courses}

        course_video_totals = (
            video_income_query.values('course_id')
            .annotate(total_count=Count('course_id'))
        )

        for order in course_video_totals:
            course_id = order['course_id']
            total_students = order['total_count']
            total_income = video_prices.get(course_id, 0) * total_students
            course_name = VideoCourse.objects.get(id=course_id).title
            course_names.append(course_name)
            course_earnings.append(total_income)

    # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    course_chart = go.Bar(
        x=course_names,
        y=course_earnings,
        marker=dict(color="#1E3A8A"),
        name="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™",
        hoverinfo="x+y",
        text=course_earnings,
        textposition="outside",
        textfont=dict(size=14, color="black")
    )

    layout = go.Layout(
        title=dict(
            text="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™",
            font=dict(size=18, color="#4A5568"),
            x=0.5
        ),
        xaxis=dict(
            title="‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™",
            tickangle=-20,
            showgrid=True,
        ),
        yaxis=dict(
            title="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)",
            gridcolor="#E2E8F0"
        ),
        height=500,
        margin=dict(t=50, b=100)
    )

    fig_course = go.Figure(data=[course_chart], layout=layout)
    graph_course_div = opy.plot(fig_course, auto_open=False, output_type="div")

    # ‚úÖ **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏±‡∏ô**
    thai_months = [
        "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
        "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ]

    monthly_income = []
    month_labels = []

    for month in range(1, 13):
        monthly_booking = booking_income_query.filter(
            booking_date__month=month
        ).aggregate(total=Sum('course__price'))['total'] or 0

        monthly_video = sum(
            video_prices.get(order['course_id'], 0) * order['total_count']
            for order in video_income_query.filter(payment_date__month=month)
            .values('course_id')
            .annotate(total_count=Count('course_id'))
        )

        monthly_total = monthly_booking + monthly_video
        monthly_income.append(monthly_total)
        month_labels.append(thai_months[month - 1])

    monthly_chart = go.Bar(
        x=month_labels,
        y=monthly_income,
        marker=dict(color="#10B981"),
        name="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
        hoverinfo="x+y",
        text=monthly_income,
        textposition="outside",
        textfont=dict(size=12, color="black")
    )

    layout_monthly = go.Layout(
        title=dict(text="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", font=dict(size=18, color="#4A5568"), x=0.5),
        xaxis=dict(title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", showgrid=False),
        yaxis=dict(title="‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)", gridcolor="#E2E8F0"),
        height=500,
        margin=dict(t=50, b=100)
    )

    fig_monthly = go.Figure(data=[monthly_chart], layout=layout_monthly)
    graph_monthly_div = opy.plot(fig_monthly, auto_open=False, output_type="div")

    return graph_course_div, graph_monthly_div


def admin_dashboard(request):
    filter_type = request.GET.get("filter", "all")
    course_type = request.GET.get("course_type", "all")

    today = datetime.today().date()

    # ‚úÖ **‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå)**
    total_booking_courses = CourseBooking.objects.filter(booking_status="confirmed").count()
    total_video_courses = VideoCourseOrder.objects.filter(payment_status="confirmed").count()
    
    total_income = (
        CourseBooking.objects.filter(booking_status="confirmed").aggregate(total=Sum('course__price'))['total'] or 0
    ) + (
        sum(
            VideoCourse.objects.filter(id=order.course_id).first().price
            if VideoCourse.objects.filter(id=order.course_id).exists() else 0
            for order in VideoCourseOrder.objects.filter(payment_status="confirmed")
        )
    )
    
    booking_income = CourseBooking.objects.filter(booking_status="confirmed").aggregate(total=Sum('course__price'))['total'] or 0
    
    video_income = sum(
        VideoCourse.objects.filter(id=order.course_id).first().price
        if VideoCourse.objects.filter(id=order.course_id).exists() else 0
        for order in VideoCourseOrder.objects.filter(payment_status="confirmed")
    )

    # ‚úÖ **‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)**
    booking_income_query = CourseBooking.objects.filter(booking_status="confirmed")
    video_income_query = VideoCourseOrder.objects.filter(payment_status="confirmed")

    if course_type == "video":
        booking_income_query = CourseBooking.objects.none()
    elif course_type == "booking":
        video_income_query = VideoCourseOrder.objects.none()

    if filter_type == "daily":
        booking_income_query = booking_income_query.filter(booking_date=today)
        video_income_query = video_income_query.filter(payment_date=today)
    elif filter_type == "monthly":
        booking_income_query = booking_income_query.filter(booking_date__month=today.month)
        video_income_query = video_income_query.filter(payment_date__month=today.month)

    # ‚úÖ **‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á)**
    course_revenues = []
    course_names = []
    course_earnings = []

    # ‚úÖ **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á**
    if course_type in ["all", "booking"]:
        courses = Course.objects.all()
        for course in courses:
            course_booking_income = CourseBooking.objects.filter(course=course, booking_status="confirmed").aggregate(total=Sum('course__price'))['total'] or 0
            total_students_in_course = CourseBooking.objects.filter(course=course, booking_status="confirmed").count()

            course_revenues.append({
                "title": course.title,  # ‚úÖ ‡πÉ‡∏ä‡πâ title ‡πÅ‡∏ó‡∏ô name
                "type": "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏à‡∏≠‡∏á",
                "total_students": total_students_in_course,
                "revenue": course_booking_income
            })

            course_names.append(course.title)
            course_earnings.append(course_booking_income)

    if course_type in ["all", "video"]:
        video_courses = VideoCourse.objects.filter(status="approved")  # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        for course in video_courses:
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ç‡∏≠‡∏á VideoCourse
            course_video_income = sum(
                order.course.price for order in VideoCourseOrder.objects.filter(course=course, payment_status="confirmed")
            )
            total_students_in_course = VideoCourseOrder.objects.filter(course=course, payment_status="confirmed").count()

            course_revenues.append({
                "title": course.title,  # ‡πÉ‡∏ä‡πâ title ‡πÅ‡∏ó‡∏ô name
                "type": "‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠",
                "total_students": total_students_in_course,
                "revenue": course_video_income
            })

            course_names.append(course.title)
            course_earnings.append(course_video_income)

    # ‚úÖ **‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü**
    graph_course_div, graph_monthly_div = generate_graphs(
    booking_income_query, video_income_query, filter_type, course_type
)


    context = {
    "total_income": total_income,
    "video_income": video_income,
    "booking_income": booking_income,
    "total_booking_courses": total_booking_courses,
    "total_video_courses": total_video_courses,
    "course_revenues": course_revenues,  # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    "filter_type": filter_type,
    "course_type": course_type,
    "graph_course_div": graph_course_div,
    "graph_monthly_div": graph_monthly_div,
}

    return render(request, "admin/dashboard_admin.html", context)

@login_required
def add_banner(request):
    if request.method == 'POST':
        image = request.FILES.get('banner_image')

        if image:
            Banner.objects.create(
                instructor=request.user,  # ‚úÖ ‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡πà‡∏≤‡πÉ‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°
                image=image,
                status='pending'  # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
            )
            messages.success(request, "‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
            return redirect('banners')
        else:
            messages.error(request, "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û")
    
    return render(request, 'instructor/add_banner.html')

@login_required
def banners(request):
    banners = Banner.objects.filter(instructor=request.user)  # ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏±‡πâ‡∏ô
    return render(request, 'instructor/banners.html', {'banners': banners})

@login_required
@admin_required
def banners_admin(request):
    banners = Banner.objects.filter(status='pending')  # ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    return render(request, 'admin/banners_admin.html', {'banners': banners})

@login_required
@admin_required
def approve_banner(request, banner_id):
    banner = get_object_or_404(Banner, id=banner_id)
    banner.status = 'approved'
    banner.rejection_message = ""  # ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
    banner.save()
    messages.success(request, "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('banners_admin')

@login_required
@admin_required
def reject_banner(request, banner_id):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            rejection_message = data.get('rejection_message', '')

            banner = get_object_or_404(Banner, id=banner_id)
            banner.status = 'rejected'
            banner.rejection_message = rejection_message
            banner.save()

            return JsonResponse({"success": True})
        except Exception as e:
            return JsonResponse({"success": False, "error": str(e)})


def delete_banner(request, banner_id):
    banner = get_object_or_404(Banner, id=banner_id)
    banner.delete()
    messages.success(request, "‡∏•‡∏ö‡πÄ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    return redirect('banners')





@instructor_required
def add_course_details(request, course_id):
    course = get_object_or_404(Course, id=course_id)

    if request.method == 'POST':
        name = request.POST.get('name')
        description = request.POST.get('description')
        additional_description = request.POST.get('additional_description')
        image = request.FILES.get('image')
        additional_image = request.FILES.get('additional_image')
        extra_image_1 = request.FILES.get('extra_image_1')  
        extra_image_2 = request.FILES.get('extra_image_2')

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™
        course_details = CourseDetails(
            course=course,
            name=name,
            description=description,
            additional_description=additional_description,
            image=image,
            additional_image=additional_image,
            extra_image_1=extra_image_1,  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 1
            extra_image_2=extra_image_2,
        )
        course_details.save()

        messages.success(request, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return redirect('reservation_courses')

    return render(request, 'instructor/add_course_details.html', {'course': course})

def course_details(request, course_id):
    # ‡∏î‡∏∂‡∏á CourseDetails ‡∏ï‡∏≤‡∏° course_id
    course = get_object_or_404(CourseDetails, course_id=course_id)
    add_course = course.course  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ CourseDetails ‡∏°‡∏µ ForeignKey ‡∏Å‡∏±‡∏ö add_course

    return render(request, 'course_details.html', {'course': course, 'add_course': add_course})



def submit_course_for_review(request, course_id):
    course = get_object_or_404(Course, id=course_id)
    course_details = get_object_or_404(CourseDetails, course=course)

    if request.method == 'POST':
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        course.status = 'pending'
        course.save()
        messages.success(request, "‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect('reservation_courses')

    return render(request, 'instructor/submit_course.html', {
        'course': course,
        'course_details': course_details
    })


@instructor_required
@login_required
def add_course(request):
    if request.method == 'POST':
        title = request.POST.get('title')
        description = request.POST.get('description')
        instructor = request.POST.get('instructor')  
        price = request.POST.get('price')
        image = request.FILES.get('image')

        print(f"üìå User adding course: {request.user} (ID: {request.user.id})")  

        if not request.user.is_authenticated:
            print("üö® ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô! added_by ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô NULL")
            return redirect('login')  # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô

        course = Course(
            title=title,
            description=description,
            instructor=instructor,
            price=price,
            image=image,
            added_by=request.user  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ID ‡∏ú‡∏π‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™
        )
        course.save()

        print(f"‚úÖ Added by: {course.added_by} (ID: {course.added_by.id})")  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°

        messages.success(request, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ")
        return redirect('add_course_details', course_id=course.id)

    return render(request, 'instructor/add_course.html')



@instructor_required
def edit_course(request, course_id):
    course = get_object_or_404(Course, id=course_id,added_by=request.user)
    
    if request.method == 'POST':
        # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        course.title = request.POST.get('title')
        course.description = request.POST.get('description')
        course.instructor = request.POST.get('instructor')
        course.price = request.POST.get('price')
        if 'image' in request.FILES:
            course.image = request.FILES['image']
        course.save()
        
        # ‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
        return redirect('edit_course_details', course_id=course.id)
    
    return render(request, 'instructor/edit_course.html', {'course': course})


@instructor_required
def edit_course_details(request, course_id):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    course_details = get_object_or_404(CourseDetails, course__id=course_id)
    course = course_details.course

    if request.method == "POST":
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ
        course_details.name = request.POST.get('name', course_details.name)
        course_details.description = request.POST.get('description', course_details.description)
        course_details.additional_description = request.POST.get('additional_description', course_details.additional_description)

        if 'image' in request.FILES:
            course_details.image = request.FILES['image']
        if 'additional_image' in request.FILES:
            course_details.additional_image = request.FILES['additional_image']

        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏õ‡πá‡∏ô "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö"
        course.status = 'revised'
        course.save()

        course_details.save()

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
        messages.success(request, "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
        return redirect('reservation_courses')

    return render(request, 'instructor/edit_course_details.html', {
        'course_details': course_details,
        'course': course
    })


@instructor_required
def reservation_courses(request):
    courses = Course.objects.filter(added_by=request.user)
    return render(request, 'instructor/reservation_courses.html', {'courses': courses})




def contact(request):
    return render(request, 'contact.html')


def user_list(request):
    members = User.objects.filter(instructor_profile__isnull=True)  # ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    instructors = InstructorProfile.objects.select_related('user').all()  # ‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô

    # ‚úÖ Debugging ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï
    print(f"üìå ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {members.count()} | ‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {instructors.count()}")
    for instructor in instructors:
        print(f"üë®‚Äçüè´ {instructor.user.first_name} {instructor.user.last_name} | {instructor.subject} | {instructor.phone}")

    return render(request, 'admin/users_teachers.html', {
        'members': members,
        'instructors': instructors
    })



def add_staff(request, user_id):  # ‡∏£‡∏±‡∏ö user_id ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    """ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô """

    user = get_object_or_404(User, id=user_id)  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å User Model

    if request.method == "POST":
        display_name = request.POST.get("display_name")
        subject = request.POST.get("subject")
        image = request.FILES.get("image")

        if display_name and subject:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á myapp_staff
            new_staff = Staff(name=display_name, subject=subject, image=image)
            new_staff.save()

            messages.success(request, "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            return redirect("user_list")  # ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô
        else:
            messages.error(request, "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")

    return render(request, "admin/add_staff.html", {"user": user})




def home(request):
    banners = Banner.objects.filter(status="approved") 
    approved_courses = Course.objects.filter(status='approved', is_closed=False)
    approved_video_courses = VideoCourse.objects.filter(status='approved')

    
    
    if request.user.is_authenticated:
        # Query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö VideoCourse ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠
        purchased_video_courses = VideoCourseOrder.objects.filter(user=request.user)
        
        # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ID ‡∏Ç‡∏≠‡∏á VideoCourse ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠
        purchased_video_course_ids = list(purchased_video_courses.values_list('course_id', flat=True))

        return render(request, 'home.html', {
            'banners': banners,
            'courses': approved_courses,
            'video_courses': approved_video_courses,
            'purchased_video_courses': purchased_video_courses,
            'purchased_video_course_ids': purchased_video_course_ids,
           

        })  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    
    return render(request, 'guest_home.html', {
        'banners': banners,
        'courses': approved_courses,
        'video_courses': approved_video_courses,  
    })  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å


def all_courses(request):
    """ ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£ """
    query = request.GET.get('q', '')
    
    # ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£
    approved_courses = Course.objects.filter(status='approved', is_closed=False)  
    approved_video_courses = VideoCourse.objects.filter(status='approved')


    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Video Courses ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠
    if request.user.is_authenticated:
        purchased_video_courses = VideoCourseOrder.objects.filter(user=request.user)
        purchased_video_course_ids = list(purchased_video_courses.values_list('course_id', flat=True))
    else:
        purchased_video_courses = []
        purchased_video_course_ids = []

    if query:
        approved_courses = approved_courses.filter(
            Q(title__icontains=query) | 
            Q(description__icontains=query)
        )
        approved_video_courses = approved_video_courses.filter(
            Q(title__icontains=query) | Q(description__icontains=query)
        )

    template_name = 'all_courses.html' if request.user.is_authenticated else 'guest_all_courses.html'
    return render(request, template_name, {'courses': approved_courses, 'query': query,'video_courses': approved_video_courses,'purchased_video_courses': purchased_video_courses,
        'purchased_video_course_ids': purchased_video_course_ids })


#def all_courses(request):
    # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 'approved'
    query = request.GET.get('q', '')  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    approved_courses = Course.objects.filter(status='approved',is_closed=False)

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if query:
        approved_courses = approved_courses.filter(
            Q(title__icontains=query) |  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏£‡πå‡∏™
            Q(description__icontains=query)  # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≠‡∏£‡πå‡∏™
        )

    # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    template_name = 'all_courses.html' if request.user.is_authenticated else 'guest_all_courses.html'

    return render(request, template_name, {'courses': approved_courses, 'query': query})


@login_required
def profile_view(request):
    return render(request, 'profile.html', {'user': request.user, 'profile': request.user.profile})


@login_required
def update_profile(request):
    if request.method == 'POST':
        user = request.user
        profile = user.profile

        user.username = request.POST.get('username', user.username)
        user.first_name = request.POST.get('first_name', user.first_name)
        user.last_name = request.POST.get('last_name', user.last_name)
        user.email = request.POST.get('email', user.email)
        user.save()

        if 'profile_picture' in request.FILES:
            profile.profile_picture = request.FILES['profile_picture']
            profile.save()  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            
        messages.success(request, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect('profile')
    
    return render(request, 'edit_profile.html', {'user': request.user, 'profile': request.user.profile})


@login_required
def profile_instructor(request):
    return render(request, 'instructor/profile_instructor.html', {'user': request.user, 'profile': request.user.profile})

@login_required
def update_profile_instructor(request):
    if request.method == 'POST':
        user = request.user
        profile = user.profile

        user.username = request.POST.get('username', user.username)
        user.first_name = request.POST.get('first_name', user.first_name)
        user.last_name = request.POST.get('last_name', user.last_name)
        user.email = request.POST.get('email', user.email)
        user.save()

        if 'profile_picture' in request.FILES:
            profile.profile_picture = request.FILES['profile_picture']
            profile.save()  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            
        messages.success(request, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect(reverse('profile_instructor')) 
    
    return render(request, 'instructor/update_profile_instructor.html', {'user': request.user, 'profile': request.user.profile})

@login_required
def logout_view(request):
    logout(request)  # ‡∏•‡∏ö session ‡∏Ç‡∏≠‡∏á User ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    messages.success(request, "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    return redirect('home')  # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å

@login_required
@instructor_required
def instructor_logout(request):
    logout(request)  # ‡∏•‡∏ö session ‡∏Ç‡∏≠‡∏á Instructor
    messages.success(request, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    return redirect('login')  # ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°

@login_required
def admin_logout(request):
    logout(request)  # ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    messages.success(request, "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
    return redirect('login')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Login ‡∏Ç‡∏≠‡∏á Admin



def check_password(request):
    return render(request, 'check_password.html')

def verify_password(request):
    if request.method == 'POST':
        current_password = request.POST['current_password']
        if request.user.check_password(current_password):
            return redirect('change_password')
        else:
            return render(request, 'check_password.html', {'error_message': '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'})
    return redirect('check_password')

def change_password(request):
    if request.method == 'POST':
        new_password = request.POST['new_password']
        confirm_new_password = request.POST['confirm_new_password']
        if new_password == confirm_new_password:
            request.user.set_password(new_password)
            request.user.save()
            login(request, request.user)  # Log the user back in
            return redirect('profile')
    return render(request, 'change_password.html')


def register_instructor(request):
    if request.method == "POST":
        username = request.POST.get("username")
        first_name = request.POST.get("first_name")
        last_name = request.POST.get("last_name")
        email = request.POST.get("email")
        phone = request.POST.get("phone")
        age = request.POST.get("age")
        subject = request.POST.get("subject")
        password = request.POST.get("password")
        password2 = request.POST.get("password2")
        profile_picture = request.FILES.get("profile_picture")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if password != password2:
            messages.error(request, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            return redirect("register_instructor")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if User.objects.filter(username=username).exists():
            messages.error(request, "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß")
            return redirect("register_instructor")
        if User.objects.filter(email=email).exists():
            messages.error(request, "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
            return redirect("register_instructor")

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á User
        user = User.objects.create(
            username=username,
            first_name=first_name,
            last_name=last_name,
            email=email,
            password=make_password(password),
        )

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡∏∏‡πà‡∏° "Instructor" ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
        instructor_group, created = Group.objects.get_or_create(name="Instructor")
        user.groups.add(instructor_group)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° Instructor

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á InstructorProfile
        instructor_profile = InstructorProfile(
            user=user,
            profile_picture=profile_picture,
            phone=phone,
            age=age,
            subject=subject,
        )
        instructor_profile.save()  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

        messages.success(request, "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return redirect("user_list")

    return render(request, "admin/register_instructor.html")


def instructor_list(request):
    instructors = InstructorProfile.objects.select_related('user').all()
    return render(request, 'staff.html', {'instructors': instructors})


def course_details_admin(request, course_id):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ id ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö course_id
    course = get_object_or_404(CourseDetails, course_id=course_id)
    add_course = course.course  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ CourseDetails ‡∏°‡∏µ ForeignKey ‡∏Å‡∏±‡∏ö add_course

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÑ‡∏õ‡∏ó‡∏µ‡πà Template
    return render(request, 'admin/course_details_admin.html', {'course': course, 'add_course': add_course})

def update_booking_status(request, booking_id, status):
    booking = get_object_or_404(CourseBooking, id=booking_id)

    if status in ["confirmed", "rejected"]:
        booking.booking_status = status
        booking.save()
        
        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        messages.success(request, f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô {booking.get_booking_status_display()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")

    return redirect("booking_detail", course_id=booking.course.id)


def booking_course(request, course_id):
    course = get_object_or_404(CourseDetails, course_id=course_id) 
    return render(request, 'booking_course.html', {'course': course})

@login_required
def submit_booking(request, course_details_id):
    course_details = get_object_or_404(CourseDetails, id=course_details_id)
    course_selected = course_details.course

    if request.method == "POST":
        selected_course = request.POST.get("selected_course", "").strip()

        if not selected_course:
            messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
            return redirect("booking_course", course_id=course_details_id)

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        student_name = request.POST['student_name']
        student_name_en = request.POST['student_name_en']
        nickname_th = request.POST['nickname_th']
        nickname_en = request.POST['nickname_en']
        age = request.POST['age']
        grade = request.POST['grade']
        other_grade = request.POST.get('other_grade', '')
        parent_nickname = request.POST['parent_nickname']
        phone = request.POST['phone']
        line_id = request.POST.get('line_id', '')

        if grade == "‡∏≠‡∏∑‡πà‡∏ô‡πÜ":
            grade = other_grade

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á `CourseBooking` ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î `user=request.user`
        booking = CourseBooking.objects.create(
            user=request.user,  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å user ‡∏ó‡∏µ‡πà‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
            student_name=student_name,
            student_name_en=student_name_en,
            nickname_th=nickname_th,
            nickname_en=nickname_en,
            age=age,
            grade=grade,
            other_grade=other_grade,
            parent_nickname=parent_nickname,
            phone=phone,
            line_id=line_id,
            course=course_selected,
            selected_course=selected_course,
            booking_status="pending",
            payment_status="pending"
        )

        return redirect("payment_page", booking_id=booking.id)

    return render(request, "booking_course.html", {"course": course_details})




def payment_page(request, booking_id):
    booking = get_object_or_404(CourseBooking, id=booking_id)  # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    course_details = get_object_or_404(CourseDetails, course=booking.course)

    #course_details = get_object_or_404(CourseDetails, id=booking.course.id)  # ‚úÖ ‡∏î‡∏∂‡∏á CourseDetails
    course = course_details.course  # ‚úÖ ‡∏î‡∏∂‡∏á Course ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
    qr_code_url = course.payment_qr.url if course.payment_qr else None  # ‚úÖ ‡∏î‡∏∂‡∏á QR Code ‡∏à‡∏≤‡∏Å Course

    return render(request, "payment_page.html", {
        "booking": booking,
        "course": course,  # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Course ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        "qr_code_url": qr_code_url
    })



    
def submit_payment(request, booking_id):
    booking = get_object_or_404(CourseBooking, id=booking_id)

    if request.method == "POST" and "payment_slip" in request.FILES:
        payment_slip = request.FILES["payment_slip"]

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏•‡∏¥‡∏õ
        fs = FileSystemStorage()
        filename = fs.save(payment_slip.name, payment_slip)
        booking.payment_slip = filename
        booking.payment_status = "pending"
        booking.save()

        messages.success(request, "‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
        return redirect("home")  # ‚úÖ ‡∏û‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å

    messages.error(request, "‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏•‡∏¥‡∏õ")
    return redirect("payment_page", booking_id=booking.id)

#################################################################################################
@login_required
def instructor_sales(request):
    active_tab = request.GET.get("type", "booking")

    # ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
    booked_courses = Course.objects.filter(
        id__in=CourseBooking.objects.values("course_id"),
        added_by=request.user.id
    ).annotate(booking_count=Count("coursebooking"))

    # ‚úÖ ‡∏´‡∏≤ CourseDetails ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    course_details_dict = {
        cd.course_id: cd 
        for cd in CourseDetails.objects.filter(course__in=booked_courses)}

    # ‚úÖ ‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
    purchased_courses = VideoCourse.objects.filter(
        id__in=VideoCourseOrder.objects.values("course_id"),  # ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ VideoCourseOrder
        added_by=request.user.id
    ).annotate(purchase_count=Count("videocourseorder"))  # ‡πÉ‡∏ä‡πâ related_name ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

    return render(request, "instructor/sales.html",{
        "booked_courses": booked_courses,
        "course_details_dict": course_details_dict,  
        "purchased_courses": purchased_courses,  # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏õ‡∏ó‡∏µ‡πà Template
        "active_tab": active_tab,

    })




@login_required
def instructor_booking_detail(request, course_id):

        # ‚úÖ ‡∏î‡∏∂‡∏á Course ‡∏à‡∏≤‡∏Å `course_id`
    course = get_object_or_404(Course, id=course_id)

    search_query = request.GET.get("search", "")

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å `CourseBooking`
    bookings = CourseBooking.objects.select_related("user").filter(course=course).order_by("-booking_date")


    if search_query:
        bookings = bookings.filter(student_name__icontains=search_query)

    paginator = Paginator(bookings, 10)
    page_number = request.GET.get("page")
    bookings_page = paginator.get_page(page_number)

    return render(request, "instructor/booking_detail.html", {
        "course": course,
        "bookings": bookings_page,
    })


@login_required
def instructor_video_order_detail(request,  order_id):

    orders = CourseOrder.objects.filter(course_name=order_id)

    return render(request, "instructor/video_order_detail.html", {
        "course": orders.first(),
        "orders": orders,
    })


@login_required
def user_booking_history(request):
    bookings = CourseBooking.objects.filter(user=request.user).order_by("-booking_date")
    video_orders = VideoCourseOrder.objects.filter(user=request.user).order_by("-payment_date")  # ‚úÖ ‡πÉ‡∏ä‡πâ payment_date ‡πÅ‡∏ó‡∏ô

    return render(request, "booking_history.html", {
        "bookings": bookings,
        "video_orders": video_orders,
    })


@login_required
def my_courses(request):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™
    bookings = CourseBooking.objects.filter(user=request.user).order_by("-booking_date")
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ã‡∏∑‡πâ‡∏≠
    purchased_video_courses = VideoCourseOrder.objects.filter(user=request.user)
    
    return render(request, 'my_courses.html', {
        'bookings': bookings,
        'purchased_video_courses': purchased_video_courses
    })

@login_required
def booking_my_courses(request, course_id):
    """ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≠‡∏á """
    course = get_object_or_404(Course, id=course_id)

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á `request.user` ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    bookings = CourseBooking.objects.filter(course=course, user=request.user).order_by("-booking_date")

    # ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤ error
    if not bookings.exists():
        return render(request, "error.html", {"message": "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ"})

    return render(request, "booking_my_courses.html", {
        "course": course,
        "bookings": bookings
    })





@login_required
def profile_admin(request):
    return render(request, 'admin/profile_admin.html', {'user': request.user, 'profile': request.user.profile})

@login_required
def update_profile_admin(request):
    if request.method == 'POST':
        user = request.user
        profile = user.profile

        user.username = request.POST.get('username', user.username)
        user.first_name = request.POST.get('first_name', user.first_name)
        user.last_name = request.POST.get('last_name', user.last_name)
        user.email = request.POST.get('email', user.email)
        user.save()

        if 'profile_picture' in request.FILES:
            profile.profile_picture = request.FILES['profile_picture']
            profile.save()  # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            
        messages.success(request, "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        return redirect(reverse('profile_admin')) 
    
    return render(request, 'admin/update_profile_admin.html', {'user': request.user, 'profile': request.user.profile})

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á PIN 6 ‡∏´‡∏•‡∏±‡∏Å
def generate_pin():
    return ''.join(random.choices(string.digits, k=6))

# ‚úÖ 1. API ‡∏Ç‡∏≠‡∏£‡∏´‡∏±‡∏™ PIN ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
def request_reset_password(request):
    if request.method == "POST":
        email = request.POST["email"]
        try:
            user = User.objects.get(email=email)
            pin = generate_pin()
            
            # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á PIN (5 ‡∏ô‡∏≤‡∏ó‡∏µ)
            request.session["reset_pin"] = {
                "pin": pin,
                "expires_at": (timezone.now() + timedelta(minutes=5)).isoformat()  # ‡πÉ‡∏ä‡πâ timezone.now()
            }
            request.session["reset_email"] = email

            # ‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• PIN ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            send_mail(
                "‡∏£‡∏´‡∏±‡∏™ PIN ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
                f"‡∏£‡∏´‡∏±‡∏™ PIN ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ {pin} (‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ)",
                settings.EMAIL_HOST_USER,
                [email],
                fail_silently=False,
            )
            return redirect("verify_reset_pin")
        except User.DoesNotExist:
            messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
    
    return render(request, "reset_password_request.html")
from django.utils import timezone  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import timezone
# ‚úÖ 2. ‡∏´‡∏ô‡πâ‡∏≤ "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™ PIN"
def verify_reset_password(request):
    if request.method == "POST":
        entered_pin = "".join([
            request.POST.get("pin1", ""),
            request.POST.get("pin2", ""),
            request.POST.get("pin3", ""),
            request.POST.get("pin4", ""),
            request.POST.get("pin5", ""),
            request.POST.get("pin6", ""),
        ])
        
        session_data = request.session.get("reset_pin", {})

        if not session_data:
            messages.error(request, "‡∏£‡∏´‡∏±‡∏™ PIN ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà")
            return redirect("reset_password_request")  

        stored_pin = session_data.get("pin")
        expires_at = session_data.get("expires_at")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™ PIN ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if expires_at and timezone.now() > timezone.datetime.fromisoformat(expires_at):
            del request.session["reset_pin"]
            messages.error(request, "‡∏£‡∏´‡∏±‡∏™ PIN ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡∏°‡πà")
            return redirect("reset_password_request")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™ PIN ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if entered_pin == stored_pin:
            return redirect("reset_password")  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ `name="reset_password"` ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö `urls.py`
        else:
            messages.error(request, "‡∏£‡∏´‡∏±‡∏™ PIN ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")

    return render(request, "reset_password_verify.html")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
def is_valid_password(password):
    """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    return (
        len(password) >= 8 and
        re.search(r"[0-9]", password)
    )

# ‚úÖ 3. ‡∏´‡∏ô‡πâ‡∏≤ "‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà"
def reset_password(request):
    if request.method == "POST":
        new_password = request.POST["new_password"]
        confirm_password = request.POST["confirm_password"]

        if new_password != confirm_password:
            messages.error(request, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
            return render(request, "reset_password_form.html")

        if not is_valid_password(new_password):
            messages.error(request, "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å, ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà, ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")
            return render(request, "reset_password_form.html")

        email = request.session.get("reset_email")
        try:
            user = User.objects.get(email=email)
            user.set_password(new_password)
            user.save()

            # ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PIN ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å session ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
            request.session.pop("reset_pin", None)
            request.session.pop("reset_email", None)

            return render(request, "reset_password_form.html", {"success": True})  # ‚úÖ ‡∏™‡πà‡∏á success=True ‡πÑ‡∏õ‡∏¢‡∏±‡∏á Template
        except User.DoesNotExist:
            messages.error(request, "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")

    return render(request, "reset_password_form.html")


@login_required
def cancel_booking(request, booking_id):
    booking = get_object_or_404(CourseBooking, id=booking_id, user=request.user)

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô "pending" ‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ
    if booking.booking_status == "pending":
        booking.booking_status = "canceled"
        booking.save()
        messages.success(request, "‚úÖ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    else:
        messages.error(request, "‚ö† ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

    return redirect("my_courses")


@login_required
@instructor_required
def close_course(request, course_id):
    """ ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™ """
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™: {course_id}")

    try:
        # ‡πÉ‡∏ä‡πâ course_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å myapp_coursebooking
        course = get_object_or_404(Course, id=course_id)

        print(f"üîç ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {course.is_closed}")

        course.is_closed = True
        course.save()

        print(f"‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {course.is_closed}")
        messages.success(request, "‚úÖ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    except Course.DoesNotExist:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™")
        messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£")

    return redirect("reservation_courses")




@login_required
@instructor_required
def reopen_course(request, course_id):
    """ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á """
    print(f"üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™: {course_id}")

    try:
        # ‡πÉ‡∏ä‡πâ course_id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å myapp_coursebooking
        course = get_object_or_404(Course, id=course_id)

        print(f"üîç ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {course.is_closed}")

        course.is_closed = False
        course.save()

        print(f"‚úÖ ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï: {course.is_closed}")
        messages.success(request, "‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏µ‡πâ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    except Course.DoesNotExist:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™")
        messages.error(request, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏£‡πå‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏±‡∏Ñ‡∏£")

    return redirect("reservation_courses")
